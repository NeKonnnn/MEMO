import os
import tempfile
import subprocess
import wave
import json
import pytubefix
try:
    from moviepy.editor import VideoFileClip
    MOVIEPY_AVAILABLE = True
except ImportError:
    VideoFileClip = None
    MOVIEPY_AVAILABLE = False
import numpy as np
import sounddevice as sd
import soundfile as sf
import time
import requests
import zipfile
import shutil
from tqdm import tqdm
import re
import sys
import torch
from typing import Optional, Callable, Tuple, List, Dict
try:
    import whisperx
    WHISPERX_AVAILABLE = True
except ImportError:
    whisperx = None
    WHISPERX_AVAILABLE = False
import gc
import logging
import traceback

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
LOCAL_DIARIZATION_AVAILABLE = True

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –º–æ–¥–µ–ª—è–º
try:
    from config import WHISPERX_MODELS_DIR, DIARIZE_MODELS_DIR, WHISPERX_BASE_MODEL, DIARIZE_MODEL
    LOCAL_MODELS_AVAILABLE = True
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å –ø—É—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    WHISPERX_MODELS_DIR = "whisperx_models"
    DIARIZE_MODELS_DIR = "diarize_models"
    WHISPERX_BASE_MODEL = "medium"
    DIARIZE_MODEL = "pyannote/speaker-diarization-3.1"
    LOCAL_MODELS_AVAILABLE = False

class WhisperXTranscriber:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(f"{__name__}.WhisperXTranscriber")
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '[%(asctime)s] %(levelname)s [WhisperX] %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.DEBUG)
        
        self.logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperXTranscriber ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WhisperX
        if not WHISPERX_AVAILABLE:
            self.logger.error("WhisperX –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise ImportError("WhisperX –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install whisperx")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        self.project_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
        self.logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.project_dir}")
        
        self.model = None
        self.temp_dir = tempfile.mkdtemp()
        self.logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_dir}")
        
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
        self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {self.language}")
        
        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º WhisperX
        self.whisper_model_path = os.path.join(self.project_dir, WHISPERX_MODELS_DIR)
        self.diarize_model_path = os.path.join(self.project_dir, DIARIZE_MODELS_DIR)
        self.logger.debug(f"–ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º WhisperX: {self.whisper_model_path}")
        self.logger.debug(f"–ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {self.diarize_model_path}")
        
        if LOCAL_MODELS_AVAILABLE:
            self.logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            self.logger.warning("–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—É—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        if LOCAL_DIARIZATION_AVAILABLE:
            self.logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            self.logger.warning("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É–¥–∏–æ
        self.sample_rate = 16000  # 16–∫–ì—Ü
        self.logger.debug(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {self.sample_rate}")
        
        self.use_ffmpeg = self._check_ffmpeg_availability()
        self.logger.debug(f"FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω: {self.use_ffmpeg}")
        
        # –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_callback = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WhisperX
        self.model_size = WHISPERX_BASE_MODEL
        self.logger.debug(f"–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ WhisperX: {self.model_size}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Ç–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        if torch.cuda.is_available():
            self.device = "cuda"
            self.compute_type = "float16"
            self.logger.info("CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPU")
        else:
            self.device = "cpu"
            self.compute_type = "float32"
            self.logger.info("CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
        
        # –ö—ç—à –¥–ª—è –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        self._cached_diarize_model = None
        
        self.logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

    def _load_local_diarization_pipeline(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            from pyannote.audio import Pipeline
            
            # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É
            config_path = os.path.join(self.diarize_model_path, "pyannote_diarization_config.yaml")
            
            if not os.path.exists(config_path):
                print(f"–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return None
            
            print(f"–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª: {config_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .bin —Ñ–∞–π–ª–æ–≤
            models_dir = os.path.join(self.diarize_model_path, "models")
            required_files = [
                "pyannote_model_segmentation-3.0.bin",
                "pyannote_model_wespeaker-voxceleb-resnet34-LM.bin"
            ]
            
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .bin —Ñ–∞–π–ª–æ–≤ –≤ {models_dir}...")
            
            for file_name in required_files:
                file_path = os.path.join(models_dir, file_name)
                if os.path.exists(file_path):
                    size = os.path.getsize(file_path) / 1024 / 1024
                    print(f"{file_name}: {size:.1f} –ú–ë")
                else:
                    print(f"{file_name}: –ù–ï –ù–ê–ô–î–ï–ù")
                    return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω...")
            pipeline = Pipeline.from_pretrained(config_path)
            
            print("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return pipeline
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            return None

    def _check_ffmpeg_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False

    def _update_progress(self, progress: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω callback"""
        try:
            if self.progress_callback:
                self.progress_callback(progress)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            pass

    def transcribe_audio_file(self, audio_path: str) -> Tuple[bool, str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        try:
            print(f"=== –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {audio_path} ===")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_path):
                print(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
                print(f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(audio_path)}")
                print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir(os.path.dirname(audio_path) if os.path.dirname(audio_path) else '.')}")
                return False, f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(audio_path)
            print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size / 1024:.1f} –ö–ë")
            
            if file_size == 0:
                print(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_path}")
                return False, f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_path}"
            
            self._update_progress(10)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å WhisperX
            print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ WhisperX...")
            model = whisperx.load_model(
                self.model_size, 
                self.device, 
                compute_type=self.compute_type,
                language=self.language,
                download_root=self.whisper_model_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
            )
            
            self._update_progress(50)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            print("–í—ã–ø–æ–ª–Ω—è—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            try:
                print("–ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
                result = model.transcribe(audio_path)
                print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                
            except Exception as transcribe_error:
                print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {transcribe_error}")
                
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ torchaudio –∫–∞–∫ fallback
                try:
                    print("–ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ torchaudio...")
                    import torchaudio
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∫–∞–∫ —Ç–µ–Ω–∑–æ—Ä
                    waveform, sample_rate = torchaudio.load(audio_path)
                    print(f"–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: —Ñ–æ—Ä–º–∞ {waveform.shape}, —á–∞—Å—Ç–æ—Ç–∞ {sample_rate}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if waveform.shape[0] > 1:
                        waveform = torch.mean(waveform, dim=0, keepdim=True)
                        print("–ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –º–æ–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–Ω–∑–æ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
                    if waveform.numel() == 0:
                        raise Exception("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä)
                    max_val = torch.max(torch.abs(waveform))
                    if max_val > 0:
                        waveform = waveform / max_val
                        print("–ê—É–¥–∏–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
                    
                    print(f"–¢–µ–Ω–∑–æ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: —Ñ–æ—Ä–º–∞ {waveform.shape}")
                    
                    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ç–µ–Ω–∑–æ—Ä
                    print("–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–µ–Ω–∑–æ—Ä...")
                    if waveform.dim() == 1:
                        waveform = waveform.unsqueeze(0)
                    elif waveform.dim() == 2 and waveform.shape[0] == 1:
                        pass
                    else:
                        raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞ —Ç–µ–Ω–∑–æ—Ä–∞: {waveform.shape}")
                    
                    result = model.transcribe(waveform, sample_rate)
                    print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–µ–Ω–∑–æ—Ä —É—Å–ø–µ—à–Ω–∞")
                    
                except Exception as tensor_error:
                    print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ torchaudio –Ω–µ —É–¥–∞–ª–∞—Å—å: {tensor_error}")
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {transcribe_error}")
            
            self._update_progress(70)
            
            # –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
            try:
                print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
                
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
                if LOCAL_DIARIZATION_AVAILABLE:
                    print("   –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    if hasattr(self, '_cached_diarize_model') and self._cached_diarize_model:
                        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                        diarize_model = self._cached_diarize_model
                    else:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
                        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
                        diarize_model = self._load_local_diarization_pipeline()
                        
                        if diarize_model:
                            print("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
                            # –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            self._cached_diarize_model = diarize_model
                        else:
                            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                            transcript = self._format_simple_transcript(result)
                            return True, transcript
                    
                    self._update_progress(80)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
                    print("–í—ã–ø–æ–ª–Ω—è—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é...")
                    diarize_segments = diarize_model(audio_path)
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {type(diarize_segments)}")
                    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(diarize_segments) if hasattr(diarize_segments, '__len__') else 'N/A'}")
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–∞—Ö –∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
                    try:
                        if hasattr(diarize_segments, 'get_timeline'):
                            timeline = diarize_segments.get_timeline()
                            print(f"Timeline –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(timeline) if timeline else 0} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                            if timeline:
                                for i, segment in enumerate(timeline[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–µ–≥–º–µ–Ω—Ç–∞
                                    print(f"      –°–µ–≥–º–µ–Ω—Ç {i+1}: {segment}")
                    except Exception as timeline_error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å timeline: {timeline_error}")
                    
                    self._update_progress(90)
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
                    print("   –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
                    try:
                        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(result.get('segments', []))} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                        for i, seg in enumerate(result.get('segments', [])[:3]):
                            print(f"      –°–µ–≥–º–µ–Ω—Ç {i+1}: {seg.get('text', '')[:50]}... (start: {seg.get('start', 'N/A')}, end: {seg.get('end', 'N/A')})")
                        
                        result_with_speakers = whisperx.assign_word_speakers(diarize_segments, result)
                        
                        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ assign_word_speakers: {len(result_with_speakers.get('segments', []))} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                        if (isinstance(result_with_speakers, dict) and 
                            'segments' in result_with_speakers and 
                            len(result_with_speakers['segments']) > 0):
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                            for i, seg in enumerate(result_with_speakers['segments'][:3]):
                                speaker = seg.get('speaker', 'N/A')
                                text = seg.get('text', '')[:50]
                                print(f"      –°–µ–≥–º–µ–Ω—Ç {i+1}: Speaker {speaker} - {text}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∏–∫–µ—Ä–∞—Ö
                            has_speakers = any('speaker' in segment for segment in result_with_speakers['segments'])
                            
                            if has_speakers:
                                result = result_with_speakers
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
                                transcript = self._format_transcript_with_speakers(result)
                                print("–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            else:
                                print("–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–∞—Ö")
                                print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
                                
                                                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ä—É—á–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                        manual_result = self._manual_assign_speakers(diarize_segments, result)
                        if manual_result:
                            print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É
                            transcript = self._format_transcript_with_speakers(manual_result)
                        else:
                            transcript = self._format_simple_transcript(result)
                            transcript = self._format_simple_transcript(result)
                            
                    except Exception as assign_error:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {assign_error}")
                        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(assign_error)}")
                        import traceback
                        traceback.print_exc()
                        
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                        print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
                        manual_result = self._manual_assign_speakers(diarize_segments, result)
                        if manual_result:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É
                            transcript = self._format_transcript_with_speakers(manual_result)
                        else:
                            transcript = self._format_simple_transcript(result)
                
                else:
                    print("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                    transcript = self._format_simple_transcript(result)
            
            except Exception as diarize_error:
                print(f"–û—à–∏–±–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {diarize_error}")
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                transcript = self._format_simple_transcript(result)
            
            self._update_progress(100)
            
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            del model
            if 'diarize_model' in locals():
                del diarize_model
            gc.collect()
            if self.device == "cuda":
                torch.cuda.empty_cache()
            
            print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True, transcript
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    def transcribe_youtube(self, url: str) -> Tuple[bool, str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å YouTube"""
        try:
            print(f"–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é YouTube: {url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio_path = self._download_youtube_audio(url)
            if not audio_path:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Å YouTube"
            
            print(f"–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio_path}")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            return self.transcribe_audio_file(audio_path)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ YouTube: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    def _format_transcript_with_speakers(self, result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–∏–∫–µ—Ä–∞—Ö –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            transcript = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã
            segments = result.get("segments", [])
            if not segments:
                print("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return self._format_simple_transcript(result)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ - –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            for i, segment in enumerate(segments):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–µ
                speaker = segment.get("speaker", None)
                text = segment.get("text", "").strip()
                start_time = segment.get("start", 0)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–∏–∫–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
                if speaker is None:
                    speaker = f"–°–ø–∏–∫–µ—Ä_{i+1}"
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not text:
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ: "12:23 –°–ø–∏–∫–µ—Ä_1: —Ç–µ–∫—Å—Ç"
                time_str = self._format_time_simple(start_time)
                formatted_line = f"{time_str} {speaker}: {text}"
                transcript.append(formatted_line)
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª—Å—è –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            if not transcript:
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
                return self._format_simple_transcript(result)
            
            # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            return "\n".join(transcript)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π: {e}")
            return self._format_simple_transcript(result)
    
    def _format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        try:
            if seconds is None:
                return "00:00"
            
            minutes = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{minutes:02d}:{secs:02d}"
        except:
            return "00:00"
    
    def _format_time_simple(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)"""
        try:
            if seconds is None:
                return "00:00"
            
            total_minutes = int(seconds // 60)
            hours = total_minutes // 60
            minutes = total_minutes % 60
            
            if hours > 0:
                return f"{hours:02d}:{minutes:02d}"
            else:
                return f"{minutes:02d}:{int(seconds % 60):02d}"
        except:
            return "00:00"

    def _format_simple_transcript(self, result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –±–µ–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            segments = result.get("segments", [])
            transcript = []
            
            for segment in segments:
                text = segment.get("text", "").strip()
                if text:
                    transcript.append(text)
            
            return " ".join(transcript)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return str(result)

    def _download_youtube_audio(self, url: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Å YouTube"""
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å YouTube: {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                temp_dir = tempfile.mkdtemp()
                print(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π SSL –æ—à–∏–±–æ–∫
                try:
                    yt = pytubefix.YouTube(url)
                    audio_stream = yt.streams.filter(only_audio=True).first()
                except Exception as yt_error:
                    if "SSL" in str(yt_error) or "EOF" in str(yt_error):
                        print(f"SSL/—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {yt_error}")
                        if retry_count < max_retries - 1:
                            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                            import time
                            time.sleep(2)
                            retry_count += 1
                            continue
                        else:
                            print(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                            return None
                    else:
                        raise yt_error
                
                if not audio_stream:
                    print("–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                
                print(f"–ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫: {audio_stream}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
                print("–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ...")
                audio_stream.download(output_path=temp_dir, filename="youtube_audio")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
                downloaded_file = os.path.join(temp_dir, "youtube_audio")
                if not os.path.exists(downloaded_file):
                    print(f"–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {downloaded_file}")
                    return None
                
                print(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {downloaded_file}")
                print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(downloaded_file) / 1024:.1f} –ö–ë")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                file_extension = os.path.splitext(downloaded_file)[1]
                print(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}")
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ WAV, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if file_extension.lower() == '.wav':
                    audio_path = downloaded_file
                    print(f"–§–∞–π–ª —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV: {audio_path}")
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                    audio_path = os.path.join(temp_dir, "youtube_audio.wav")
                    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV: {audio_path}")
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                        result = subprocess.run([
                            'ffmpeg', '-y', '-i', downloaded_file, 
                            '-acodec', 'pcm_s16le', '-ar', '16000', '-ac', '1', 
                            audio_path
                        ], capture_output=True, text=True, timeout=60)
                        
                        if result.returncode != 0:
                            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ FFmpeg: {result.stderr}")
                            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                            audio_path = downloaded_file
                            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
                        else:
                            print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            
                    except subprocess.TimeoutExpired:
                        print(f"–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
                        audio_path = downloaded_file
                    except Exception as conv_error:
                        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {conv_error}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
                        audio_path = downloaded_file
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                if not os.path.exists(audio_path):
                    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                    return None
                
                file_size = os.path.getsize(audio_path) / 1024
                print(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {audio_path}")
                print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size:.1f} –ö–ë")
                
                return audio_path
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube –∞—É–¥–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {e}")
                
                if retry_count < max_retries - 1:
                    print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    import time
                    time.sleep(3)
                    retry_count += 1
                else:
                    print(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    import traceback
                    traceback.print_exc()
                    return None
        
        return None

    def set_progress_callback(self, callback: Callable[[int], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_callback = callback

    def set_language(self, language: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        self.language = language
        self.logger.info(f"–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {language}")

    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞: {self.temp_dir}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.cleanup()

    def _manual_assign_speakers(self, diarize_segments, whisper_result):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        try:
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            segments = whisper_result.get('segments', [])
            if not segments:
                print("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º timeline –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            try:
                if hasattr(diarize_segments, 'get_timeline'):
                    diarize_timeline = diarize_segments.get_timeline()
                    print(f"Timeline –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(diarize_timeline)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                else:
                    print("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å timeline –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                    return None
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è timeline: {e}")
                return None
            
            if not diarize_timeline:
                print("Timeline –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–∏–∫–µ—Ä–∞—Ö
            result_with_speakers = whisper_result.copy()
            result_with_speakers['segments'] = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
            unique_speakers = self._analyze_diarization_speakers(diarize_timeline)
            print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤: {len(unique_speakers)}")
            for i, speaker in enumerate(unique_speakers):
                print(f"      –°–ø–∏–∫–µ—Ä {i+1}: {speaker}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ
            refined_segments = self._refine_segments_for_diarization(segments, diarize_timeline)
            print(f"–†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(refined_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏–∫–µ—Ä
            for i, segment in enumerate(refined_segments):
                segment_start = segment.get('start', 0)
                segment_end = segment.get('end', 0)
                segment_text = segment.get('text', '').strip()
                
                if not segment_text:
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                speaker = self._find_speaker_for_time(diarize_timeline, segment_start, segment_end)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–∏–∫–µ—Ä–µ
                new_segment = segment.copy()
                new_segment['speaker'] = speaker
                result_with_speakers['segments'].append(new_segment)
                
                print(f"–°–µ–≥–º–µ–Ω—Ç {i+1}: {segment_text[:30]}... -> Speaker {speaker}")
            
            print(f"–†—É—á–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result_with_speakers['segments'])} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return result_with_speakers
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def _refine_segments_for_diarization(self, segments, diarize_timeline):
        """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –∫–∞–∫ –µ—Å—Ç—å - –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è"""
        try:
            # –ù–ï —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ª–æ–≥—É
            # –°–ø–∏–∫–µ—Ä –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
            print(f"–û—Å—Ç–∞–≤–ª—è–µ–º {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è")
            return segments
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {e}")
            return segments
    
    def _split_text_into_parts(self, text, total_duration, chunk_duration):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            parts = []
            words = text.split()
            total_words = len(words)
            
            if total_words == 0:
                return []
            
            # –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
            # –ú–∏–Ω–∏–º—É–º 2-3 —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç, –º–∞–∫—Å–∏–º—É–º 8-10 —Å–ª–æ–≤
            max_words_per_chunk = min(8, max(2, total_words // max(1, int(total_duration / chunk_duration))))
            
            current_start = 0
            current_word_index = 0
            
            while current_word_index < total_words:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
                remaining_words = total_words - current_word_index
                remaining_chunks = max(1, int((total_duration - current_start) / chunk_duration))
                
                words_in_chunk = min(max_words_per_chunk, max(2, remaining_words // remaining_chunks))
                chunk_end_word_index = min(current_word_index + words_in_chunk, total_words)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                chunk_ratio = (chunk_end_word_index - current_word_index) / total_words
                chunk_time = total_duration * chunk_ratio
                current_end = current_start + chunk_time
                
                # –ë–µ—Ä–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                chunk_words = words[current_word_index:chunk_end_word_index]
                chunk_text = ' '.join(chunk_words)
                
                if chunk_text.strip():
                    parts.append((chunk_text.strip(), current_start, current_end))
                
                current_start = current_end
                current_word_index = chunk_end_word_index
            
            print(f"–†–∞–∑–±–∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π (–±—ã–ª–æ {total_words} —Å–ª–æ–≤)")
            return parts
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return [(text, 0, total_duration)]
    
    def _find_speaker_for_time(self, diarize_timeline, start_time, end_time):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            best_match = None
            best_overlap = 0
            
            # –ò—â–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            for segment in diarize_timeline:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
                    if hasattr(segment, 'start') and hasattr(segment, 'end'):
                        diarize_start = segment.start
                        diarize_end = segment.end
                    elif hasattr(segment, '__getitem__'):
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏
                        diarize_start = segment[0] if len(segment) > 0 else 0
                        diarize_end = segment[1] if len(segment) > 1 else 0
                    else:
                        continue
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                    overlap_start = max(diarize_start, start_time)
                    overlap_end = min(diarize_end, end_time)
                    overlap_duration = max(0, overlap_end - overlap_start)
                    
                    if overlap_duration > best_overlap:
                        best_overlap = overlap_duration
                        best_match = segment
                        
                except Exception as segment_error:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {segment_error}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–≥–º–µ–Ω—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫—É —Å–ø–∏–∫–µ—Ä–∞
            if best_match and best_overlap > 0:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ pyannote
                    speaker_id = None
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞
                    if hasattr(best_match, 'track'):
                        speaker_id = str(best_match.track)
                        print(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ track: {speaker_id}")
                    elif hasattr(best_match, 'label'):
                        speaker_id = str(best_match.label) 
                        print(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ label: {speaker_id}")
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–µ –∏–∑ diarize_segments –Ω–∞–ø—Ä—è–º—É—é
                        try:
                            # –ò—â–µ–º —Å–µ–≥–º–µ–Ω—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
                            for track, label in self._extract_speaker_tracks(best_match, start_time, end_time):
                                speaker_id = f"TRACK_{track}"
                                print(f"–ò–∑–≤–ª–µ—á–µ–Ω track: {track} -> {speaker_id}")
                                break
                            
                            if not speaker_id:
                                # –ï—Å–ª–∏ track –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
                                coord_hash = hash(f"{best_match.start:.3f}_{best_match.end:.3f}") % 100
                                speaker_id = f"SPEAKER_{coord_hash:02d}"
                                print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {speaker_id}")
                                
                        except Exception as track_error:
                            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è track: {track_error}")
                            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à
                            coord_hash = hash(f"{best_match.start:.3f}_{best_match.end:.3f}") % 100
                            speaker_id = f"SPEAKER_{coord_hash:02d}"
                            print(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {speaker_id}")
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Å–ø–∏–∫–µ—Ä–∞
                    normalized_speaker = self._normalize_speaker_name(speaker_id)
                    print(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞: {normalized_speaker} (–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {best_overlap:.2f}—Å)")
                    return normalized_speaker
                        
                except Exception as label_error:
                    print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞: {label_error}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–≥–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–µ—Ç–∫—É
            print(f"–°–ø–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ [{start_time:.2f} - {end_time:.2f}], –∏—Å–ø–æ–ª—å–∑—É–µ–º Speaker_A")
            return "Speaker_A"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ø–∏–∫–µ—Ä–∞: {e}")
            return "Speaker_A"
    
    def _normalize_speaker_name(self, speaker_id):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Å–ø–∏–∫–µ—Ä–∞ –∫ —á–∏—Ç–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞
            if not hasattr(self, '_speaker_mapping'):
                self._speaker_mapping = {}
                self._speaker_counter = 0
            
            if speaker_id not in self._speaker_mapping:
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è
                speaker_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
                if self._speaker_counter < len(speaker_letters):
                    simple_name = f"Speaker_{speaker_letters[self._speaker_counter]}"
                else:
                    simple_name = f"Speaker_{self._speaker_counter + 1}"
                
                self._speaker_mapping[speaker_id] = simple_name
                self._speaker_counter += 1
                print(f"–ú–∞–ø–ø–∏–Ω–≥: {speaker_id} -> {simple_name}")
            
            return self._speaker_mapping[speaker_id]
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Å–ø–∏–∫–µ—Ä–∞: {e}")
            return "Speaker_A"
    
    def _extract_speaker_tracks(self, segment, start_time, end_time):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ pyannote Annotation
            if hasattr(segment, '_tracks') and hasattr(segment, '_labels'):
                tracks = segment._tracks
                labels = segment._labels
                
                for track_id, label in zip(tracks, labels):
                    yield track_id, label
                    
            elif hasattr(segment, 'get_tracks'):
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
                for track in segment.get_tracks():
                    yield track, f"speaker_{track}"
                    
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ tracks, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                segment_str = str(segment)
                print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞: {segment_str}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å track –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                import re
                track_match = re.search(r'track_(\d+)', segment_str.lower())
                if track_match:
                    track_id = track_match.group(1)
                    yield track_id, f"speaker_{track_id}"
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: {e}")
            return
    
    def _analyze_diarization_speakers(self, diarize_timeline):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤"""
        try:
            unique_speakers = set()
            
            for segment in diarize_timeline:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–µ
                    speaker_info = None
                    
                    if hasattr(segment, 'track'):
                        speaker_info = f"TRACK_{segment.track}"
                    elif hasattr(segment, 'label'):
                        speaker_info = str(segment.label)
                    else:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                        segment_str = str(segment)
                        
                        # –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã pyannote
                        import re
                        patterns = [
                            r'(\w+_\d+)',  # SPEAKER_01, track_1, etc.
                            r'<Segment\((.+?)\)>',  # <Segment(track_1)>
                            r'track[_\s]*(\d+)',  # track_1, track 1
                        ]
                        
                        for pattern in patterns:
                            match = re.search(pattern, segment_str, re.IGNORECASE)
                            if match:
                                speaker_info = match.group(1)
                                break
                        
                        if not speaker_info:
                            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            start_coord = getattr(segment, 'start', 0)
                            end_coord = getattr(segment, 'end', 0)
                            coord_hash = hash(f"{start_coord:.3f}_{end_coord:.3f}") % 10
                            speaker_info = f"SPEAKER_{coord_hash}"
                    
                    if speaker_info:
                        unique_speakers.add(speaker_info)
                        
                except Exception as segment_error:
                    print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: {segment_error}")
                    continue
            
            return sorted(list(unique_speakers))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤: {e}")
            return []
