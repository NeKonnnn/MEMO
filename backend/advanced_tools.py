"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è MemoAI
–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import os
import json
import requests
import subprocess
import tempfile
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging
from langchain_core.tools import tool

logger = logging.getLogger(__name__)

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
# ================================

@tool
def read_file_content(file_path: str) -> str:
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(file_path):
            return f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        return f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path}:\n{content}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"

@tool
def write_file_content(file_path: str, content: str) -> str:
    """–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {str(e)}"

@tool
def list_directory_contents(directory_path: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        if not os.path.exists(directory_path):
            return f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        items = []
        for item in os.listdir(directory_path):
            item_path = os.path.join(directory_path, item)
            if os.path.isdir(item_path):
                items.append(f"üìÅ {item}/")
            else:
                size = os.path.getsize(item_path)
                items.append(f"üìÑ {item} ({size} –±–∞–π—Ç)")
        
        return f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path}:\n" + "\n".join(items)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –í–ï–ë-–ü–û–ò–°–ö–ê
# ================================

@tool
def search_web(query: str, num_results: int = 5) -> str:
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±–µ–∑ API –∫–ª—é—á–µ–π)
        url = "https://api.duckduckgo.com/"
        params = {
            "q": query,
            "format": "json",
            "no_html": "1",
            "skip_disambig": "1"
        }
        
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        results = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in data.get("Results", [])[:num_results]:
            results.append(f"‚Ä¢ {result.get('Text', '')} - {result.get('FirstURL', '')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        for topic in data.get("RelatedTopics", [])[:3]:
            if isinstance(topic, dict) and "Text" in topic:
                results.append(f"‚Ä¢ {topic['Text']}")
        
        if results:
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n" + "\n".join(results)
        else:
            return f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {str(e)}"

@tool
def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenWeatherMap API (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: [–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–≥–æ–¥–Ω—ã–º API –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}"

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –í–´–ß–ò–°–õ–ï–ù–ò–ô
# ================================

@tool
def calculate_expression(expression: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        allowed_names = {
            "abs": abs, "round": round, "min": min, "max": max,
            "sum": sum, "pow": pow, "sqrt": lambda x: x ** 0.5,
            "sin": lambda x: __import__("math").sin(x),
            "cos": lambda x: __import__("math").cos(x),
            "tan": lambda x: __import__("math").tan(x),
            "log": lambda x: __import__("math").log(x),
            "pi": 3.14159265359,
            "e": 2.71828182846
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        code = compile(expression, "<string>", "eval")
        for name in code.co_names:
            if name not in allowed_names:
                return f"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è '{name}'"
        
        result = eval(expression, {"__builtins__": {}}, allowed_names)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

@tool
def convert_units(value: float, from_unit: str, to_unit: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        conversions = {
            # –î–ª–∏–Ω–∞
            ("m", "cm"): lambda x: x * 100,
            ("cm", "m"): lambda x: x / 100,
            ("km", "m"): lambda x: x * 1000,
            ("m", "km"): lambda x: x / 1000,
            
            # –í–µ—Å
            ("kg", "g"): lambda x: x * 1000,
            ("g", "kg"): lambda x: x / 1000,
            ("lb", "kg"): lambda x: x * 0.453592,
            ("kg", "lb"): lambda x: x / 0.453592,
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            ("c", "f"): lambda x: x * 9/5 + 32,
            ("f", "c"): lambda x: (x - 32) * 5/9,
            ("c", "k"): lambda x: x + 273.15,
            ("k", "c"): lambda x: x - 273.15,
        }
        
        key = (from_unit.lower(), to_unit.lower())
        if key in conversions:
            result = conversions[key](value)
            return f"{value} {from_unit} = {result} {to_unit}"
        else:
            return f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_unit} –≤ {to_unit} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}"

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–¢–ê–ú–ò
# ================================

@tool
def get_current_datetime() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    now = datetime.now()
    return f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}"

@tool
def calculate_date_difference(date1: str, date2: str) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏"""
    try:
        from datetime import datetime
        
        d1 = datetime.strptime(date1, "%Y-%m-%d")
        d2 = datetime.strptime(date2, "%Y-%m-%d")
        
        diff = abs((d2 - d1).days)
        return f"–†–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É {date1} –∏ {date2}: {diff} –¥–Ω–µ–π"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–∏ –¥–∞—Ç: {str(e)}"

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ò–°–¢–ï–ú–û–ô
# ================================

@tool
def execute_command(command: str) -> str:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)"""
    try:
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        allowed_commands = [
            "ls", "dir", "pwd", "whoami", "date", "uptime",
            "ps", "df", "free", "uname", "cat", "head", "tail"
        ]
        
        cmd_parts = command.split()
        if not cmd_parts or cmd_parts[0] not in allowed_commands:
            return f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            timeout=30
        )
        
        if result.returncode == 0:
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{command}':\n{result.stdout}"
        else:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{command}':\n{result.stderr}"
            
    except subprocess.TimeoutExpired:
        return f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

@tool
def get_system_info() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        import platform
        import psutil
        
        info = {
            "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": platform.system(),
            "–í–µ—Ä—Å–∏—è": platform.version(),
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": platform.machine(),
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": platform.processor(),
            "–ü–∞–º—è—Ç—å": f"{psutil.virtual_memory().total // (1024**3)} GB",
            "–î–∏—Å–∫": f"{psutil.disk_usage('/').total // (1024**3)} GB"
        }
        
        result = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:\n"
        for key, value in info.items():
            result += f"{key}: {value}\n"
        
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {str(e)}"

# ================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# ================================

@tool
def create_json_data(data: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JSON
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        
        # –ü—Ä–∏–º–µ—Ä: "name: John, age: 30, city: Moscow"
        if ":" in data and "," in data:
            items = data.split(",")
            json_obj = {}
            for item in items:
                if ":" in item:
                    key, value = item.split(":", 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
                    if value.isdigit():
                        json_obj[key] = int(value)
                    elif value.lower() in ["true", "false"]:
                        json_obj[key] = value.lower() == "true"
                    else:
                        json_obj[key] = value
            
            return f"JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n{json.dumps(json_obj, indent=2, ensure_ascii=False)}"
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON: {str(e)}"

@tool
def analyze_text(text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)"""
    try:
        words = len(text.split())
        chars = len(text)
        chars_no_spaces = len(text.replace(" ", ""))
        sentences = len([s for s in text.split(".") if s.strip()])
        
        analysis = {
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤": words,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤": chars,
            "–°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤": chars_no_spaces,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π": sentences,
            "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞": round(chars_no_spaces / words, 2) if words > 0 else 0
        }
        
        result = "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:\n"
        for key, value in analysis.items():
            result += f"{key}: {value}\n"
        
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

# ================================
# –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
# ================================

ADVANCED_TOOLS = [
    # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    read_file_content,
    write_file_content,
    list_directory_contents,
    
    # –í–µ–±-–ø–æ–∏—Å–∫
    search_web,
    get_weather,
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è
    calculate_expression,
    convert_units,
    
    # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
    get_current_datetime,
    calculate_date_difference,
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    execute_command,
    get_system_info,
    
    # –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    create_json_data,
    analyze_text,
]

def get_all_advanced_tools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return ADVANCED_TOOLS

