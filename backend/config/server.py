"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è MemoAI Backend
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FastAPI, CORS, Socket.IO –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import os
from typing import List

# ================================
# –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ï–†–ê
# ================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_CONFIG = {
    "host": os.getenv("MEMOAI_HOST", "0.0.0.0"),
    "port": int(os.getenv("MEMOAI_PORT", "8000")),
    "reload": os.getenv("MEMOAI_RELOAD", "false").lower() == "true",
    "log_level": os.getenv("MEMOAI_LOG_LEVEL", "info"),
    "workers": int(os.getenv("MEMOAI_WORKERS", "1")),
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
FASTAPI_CONFIG = {
    "title": "MemoAI Web API",
    "description": "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ MemoAI",
    "version": "1.0.0",
    "docs_url": "/docs",
    "redoc_url": "/redoc",
    "openapi_url": "/openapi.json",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
CORS_CONFIG = {
    "allow_origins": [
        "http://localhost:3000",      # React dev server
        "http://127.0.0.1:3000",     # React dev server (IPv4)
        "http://localhost:3001",      # React dev server (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç)
        "http://127.0.0.1:3001",     # React dev server (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç)
        "http://localhost:5173",      # Vite dev server
        "http://127.0.0.1:5173",     # Vite dev server (IPv4)
        "http://localhost:8080",      # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
        "http://127.0.0.1:8080",     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
    ],
    "allow_credentials": True,
    "allow_methods": ["*"],
    "allow_headers": ["*"],
    "expose_headers": ["*"],
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Socket.IO
SOCKETIO_CONFIG = {
    "async_mode": "asgi",
    "cors_allowed_origins": [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3001",
        "http://127.0.0.1:3001",
        "http://localhost:5173",
        "http://127.0.0.1:5173",
    ],
    "ping_timeout": 120,      # ping timeout –¥–æ 2 –º–∏–Ω—É—Ç
    "ping_interval": 25,      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥
    "logger": True,           # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    "engineio_logger": True,  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ engine.io
    "max_http_buffer_size": 1e8,  # 100MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOGGING_CONFIG = {
    "level": "DEBUG",
    "format": "[%(asctime)s] %(levelname)s [Backend] %(message)s",
    "datefmt": "%Y-%m-%d %H:%M:%S",
    "file": {
        "enabled": os.getenv("MEMOAI_LOG_FILE", "false").lower() == "true",
        "path": os.getenv("MEMOAI_LOG_PATH", "logs/backend.log"),
        "max_size": int(os.getenv("MEMOAI_LOG_MAX_SIZE", "10")),  # MB
        "backup_count": int(os.getenv("MEMOAI_LOG_BACKUP_COUNT", "5")),
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
WEBSOCKET_CONFIG = {
    "max_message_size": 1024 * 1024,  # 1MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    "ping_interval": 20,               # 20 —Å–µ–∫—É–Ω–¥
    "ping_timeout": 10,                # 10 —Å–µ–∫—É–Ω–¥
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
STATIC_CONFIG = {
    "frontend_build_path": "../frontend/build",
    "static_url": "/static",
    "static_dir": "../frontend/build/static",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_CONFIG = {
    "rate_limit_enabled": os.getenv("MEMOAI_RATE_LIMIT", "false").lower() == "true",
    "rate_limit_requests": int(os.getenv("MEMOAI_RATE_LIMIT_REQUESTS", "100")),
    "rate_limit_window": int(os.getenv("MEMOAI_RATE_LIMIT_WINDOW", "60")),  # —Å–µ–∫—É–Ω–¥—ã
    "max_upload_size": int(os.getenv("MEMOAI_MAX_UPLOAD_SIZE", "100")),    # MB
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π
MODEL_CONFIG = {
    "default_engine": "whisperx",
    "default_language": "ru",
    "auto_detect_language": True,
    "max_context_size": 32768,
    "max_output_tokens": 2048,
}

# ================================
# –§–£–ù–ö–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ================================

def get_server_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞"""
    host = SERVER_CONFIG["host"]
    port = SERVER_CONFIG["port"]
    
    if host == "0.0.0.0":
        host = "localhost"
    
    return f"http://{host}:{port}"

def get_websocket_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å WebSocket URL"""
    host = SERVER_CONFIG["host"]
    port = SERVER_CONFIG["port"]
    
    if host == "0.0.0.0":
        host = "localhost"
    
    return f"ws://{host}:{port}"

def get_cors_origins() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö CORS origins"""
    origins = CORS_CONFIG["allow_origins"].copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    env_origins = os.getenv("MEMOAI_CORS_ORIGINS", "")
    if env_origins:
        origins.extend(env_origins.split(","))
    
    return list(set(origins))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

def get_socketio_cors_origins() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö CORS origins –¥–ª—è Socket.IO"""
    origins = SOCKETIO_CONFIG["cors_allowed_origins"].copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    env_origins = os.getenv("MEMOAI_SOCKETIO_CORS_ORIGINS", "")
    if env_origins:
        origins.extend(env_origins.split(","))
    
    return list(set(origins))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

def get_logging_config() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = LOGGING_CONFIG.copy()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_level = os.getenv("MEMOAI_LOG_LEVEL")
    if env_level:
        config["level"] = env_level.upper()
    
    return config

def get_uvicorn_config() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è uvicorn"""
    return {
        "host": SERVER_CONFIG["host"],
        "port": SERVER_CONFIG["port"],
        "reload": SERVER_CONFIG["reload"],
        "log_level": SERVER_CONFIG["log_level"],
        "workers": SERVER_CONFIG["workers"],
        "access_log": True,
        "use_colors": True,
    }

# ================================
# –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ================================

def validate_config() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
        port = SERVER_CONFIG["port"]
        if not (1 <= port <= 65535):
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç: {port}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = SERVER_CONFIG["log_level"]
        valid_levels = ["debug", "info", "warning", "error", "critical"]
        if log_level not in valid_levels:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS origins
        if not get_cors_origins():
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ CORS origins")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def print_config_summary():
    """–í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("=" * 50)
    print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MEMOAI BACKEND")
    print("=" * 50)
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {get_server_url()}")
    print(f"üîå WebSocket: {get_websocket_url()}")
    print(f"üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {get_server_url()}/docs")
    print(f"üìä ReDoc: {get_server_url()}/redoc")
    print(f"üîí CORS Origins: {len(get_cors_origins())} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
    print(f"üì° Socket.IO: {len(get_socketio_cors_origins())} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
    print(f"üìÅ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {get_logging_config()['level']}")
    print(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if SERVER_CONFIG['reload'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print("=" * 50)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if validate_config():
        print_config_summary()
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
