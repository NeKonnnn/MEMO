import React, { useState, useRef, useEffect, useCallback } from 'react';
import {
  Box,
  Paper,
  TextField,
  IconButton,
  Typography,
  Container,
  Card,
  CardContent,
  Avatar,
  Chip,
  Fab,
  Tooltip,
  LinearProgress,
  Alert,
  Snackbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Slider,
  CircularProgress,
  Fade,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Menu,
  Collapse,
} from '@mui/material';
import {
  Send as SendIcon,
  Person as PersonIcon,
  SmartToy as BotIcon,
  Clear as ClearIcon,
  ContentCopy as CopyIcon,
  Stop as StopIcon,
  Refresh as RefreshIcon,
  Mic as MicIcon,
  VolumeUp as VolumeUpIcon,
  AttachFile as AttachFileIcon,
  Close as CloseIcon,
  Upload as UploadIcon,
  Description as DocumentIcon,
  PictureAsPdf as PdfIcon,
  TableChart as ExcelIcon,
  Delete as DeleteIcon,
  GetApp as DownloadIcon,
  Settings as SettingsIcon,
  Square as SquareIcon,
  ChevronLeft as ChevronLeftIcon,
  ChevronRight as ChevronRightIcon,
} from '@mui/icons-material';
import { useAppContext, useAppActions, Message } from '../contexts/AppContext';
import { useSocket } from '../contexts/SocketContext';
import { getApiUrl, getWsUrl } from '../config/api';
import MessageRenderer from '../components/MessageRenderer';

interface UnifiedChatPageProps {
  isDarkMode: boolean;
}

export default function UnifiedChatPage({ isDarkMode }: UnifiedChatPageProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const [inputMessage, setInputMessage] = useState('');
  const [showCopyAlert, setShowCopyAlert] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [audioLevel, setAudioLevel] = useState(0);
  const [recordedText, setRecordedText] = useState('');
  const [recordingTime, setRecordingTime] = useState(0);
  const [voiceSettings, setVoiceSettings] = useState(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –∏–∑ localStorage
    const savedVoiceSpeaker = localStorage.getItem('voice_speaker');
    const savedVoiceId = localStorage.getItem('voice_id');
    const savedSpeechRate = localStorage.getItem('speech_rate');
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è voiceSettings –∏–∑ localStorage:', {
      savedVoiceSpeaker,
      savedVoiceId,
      savedSpeechRate,
      parsedSpeechRate: savedSpeechRate ? parseFloat(savedSpeechRate) : 1.0
    });
    
    const settings = {
      voice_id: savedVoiceId || 'ru',
      speech_rate: savedSpeechRate ? parseFloat(savedSpeechRate) : 1.0,
      voice_speaker: savedVoiceSpeaker || 'baya',
    };
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
    return settings;
  });
  const [showVoiceDialog, setShowVoiceDialog] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –≥–æ–ª–æ—Å–∞
  const [currentTestVoice, setCurrentTestVoice] = useState<string | null>(null);
  
  // –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–ª–æ—Å–∞
  const voiceTestMessages = {
    baya: "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–∑–∏–∫ –ò –ò. –ß—Ç–æ –æ–±—Å—É–¥–∏–º?",
    xenia: "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–∑–∏–∫ –ò –ò. –ß—Ç–æ –æ–±—Å—É–¥–∏–º?",
    kseniya: "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–∑–∏–∫ –ò –ò. –ß—Ç–æ –æ–±—Å—É–¥–∏–º?",
    aidar: "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–∑–∏–∫ –ò –ò. –ß—Ç–æ –æ–±—Å—É–¥–∏–º?",
    eugene: "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞–∑–∏–∫ –ò –ò. –ß—Ç–æ –æ–±—Å—É–¥–∏–º?"
  };
  
  // WebSocket –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const [voiceSocket, setVoiceSocket] = useState<WebSocket | null>(null);
  const [isVoiceConnected, setIsVoiceConnected] = useState(false);
  const [shouldReconnect, setShouldReconnect] = useState(true);
  
  // Real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
  const [realtimeText, setRealtimeText] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [query, setQuery] = useState('');
  const [isQuerying, setIsQuerying] = useState(false);
  const [queryResponse, setQueryResponse] = useState('');
  const [uploadedFiles, setUploadedFiles] = useState<Array<{
    name: string;
    size: number;
    type: string;
    uploadDate: string;
  }>>([]);
  const [showDocumentDialog, setShowDocumentDialog] = useState(false);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  
  // Refs
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const animationFrameRef = useRef<number | null>(null);
  const currentStreamRef = useRef<MediaStream | null>(null);
  const currentAudioRef = useRef<HTMLAudioElement | null>(null);
  const silenceTimerRef = useRef<NodeJS.Timeout | null>(null);
  const lastAudioLevelRef = useRef<number>(0);
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const silenceThreshold = 0.1;
  const silenceTimeout = 5000;
  
  // Context –∏ Socket
  const { state } = useAppContext();
  const { clearMessages, showNotification, setSpeaking, setRecording } = useAppActions();
  const { sendMessage, isConnected, reconnect, stopGeneration } = useSocket();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≥–æ–ª–æ—Å–∞
  const [currentVoiceIndex, setCurrentVoiceIndex] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞
  const [showVoiceSettings, setShowVoiceSettings] = useState(false);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: voiceSettings.voice_speaker =', voiceSettings.voice_speaker, 'currentVoiceIndex =', currentVoiceIndex);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [state.messages]);

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadDocuments = async () => {
      try {
        const response = await fetch(getApiUrl('/api/documents'));
        if (response.ok) {
          const result: any = await response.json();
          if (result.success && result.documents) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã —Ñ–∞–π–ª–æ–≤
            const files = result.documents.map((filename: string) => ({
              name: filename,
              size: 0, // –†–∞–∑–º–µ—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
              type: 'application/octet-stream', // –¢–∏–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
              uploadDate: new Date().toISOString(),
            }));
            setUploadedFiles(files);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
      }
    };

    loadDocuments();
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º currentVoiceIndex —Å voiceSettings.voice_speaker –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const voices = Object.keys(voiceTestMessages);
    const currentIndex = voices.indexOf(voiceSettings.voice_speaker);
    console.log('useEffect [voiceSettings.voice_speaker]: voice_speaker =', voiceSettings.voice_speaker, '–Ω–∞–π–¥–µ–Ω–Ω—ã–π index =', currentIndex);
    if (currentIndex !== -1) {
      setCurrentVoiceIndex(currentIndex);
      console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ voice_speaker: voice_speaker =', voiceSettings.voice_speaker, 'index =', currentIndex);
    } else {
      console.log('–ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ: voice_speaker =', voiceSettings.voice_speaker);
    }
  }, [voiceSettings.voice_speaker]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const voices = Object.keys(voiceTestMessages);
    const currentIndex = voices.indexOf(voiceSettings.voice_speaker);
    console.log('useEffect [] (–∑–∞–≥—Ä—É–∑–∫–∞): voice_speaker =', voiceSettings.voice_speaker, '–Ω–∞–π–¥–µ–Ω–Ω—ã–π index =', currentIndex);
    if (currentIndex !== -1) {
      setCurrentVoiceIndex(currentIndex);
      console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: voice_speaker =', voiceSettings.voice_speaker, 'index =', currentIndex);
    } else {
      console.log('–ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: voice_speaker =', voiceSettings.voice_speaker);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
  useEffect(() => {
    const voices = Object.keys(voiceTestMessages);
    const currentIndex = voices.indexOf(voiceSettings.voice_speaker);
    if (currentIndex !== -1 && currentIndex !== currentVoiceIndex) {
      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: currentVoiceIndex =', currentVoiceIndex, '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å =', currentIndex);
      setCurrentVoiceIndex(currentIndex);
    }
  });

  // ================================
  // –§–£–ù–ö–¶–ò–ò –¢–ï–ö–°–¢–û–í–û–ì–û –ß–ê–¢–ê
  // ================================

  const handleSendMessage = (): void => {
    if (!inputMessage.trim() || !isConnected || state.isLoading) {
      return;
    }

    sendMessage(inputMessage.trim());
    setInputMessage('');
  };

  const handleKeyPress = (event: React.KeyboardEvent): void => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };

  const handleCopyMessage = async (content: string): Promise<void> => {
    try {
      await navigator.clipboard.writeText(content);
      setShowCopyAlert(true);
    } catch (error) {
      showNotification('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    }
  };

  const formatTimestamp = (timestamp: string): string => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // ================================
  // –§–£–ù–ö–¶–ò–ò –ì–û–õ–û–°–û–í–û–ì–û –ß–ê–¢–ê
  // ================================

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const connectVoiceWebSocket = () => {
    if (voiceSocket && voiceSocket.readyState === WebSocket.OPEN) {
      return; // –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    }
    
    const ws = new WebSocket(getWsUrl('/ws/voice'));
    setVoiceSocket(ws);
    
    ws.onopen = () => {
      setIsVoiceConnected(true);
      showNotification('success', '–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      console.log('Voice WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    };
    
    ws.onmessage = (event) => {
      try {
        if (typeof event.data === 'string') {
          const data = JSON.parse(event.data);
          console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket:', data);
          
          switch (data.type) {
            case 'listening_started':
              showNotification('success', '–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –≥–æ–ª–æ—Å–∞');
              console.log('WebSocket: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
              break;
              
            case 'speech_recognized':
              // –û–±–Ω–æ–≤–ª—è–µ–º real-time —Ç–µ–∫—Å—Ç
              console.log('–†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢:', data.text);
              console.log('–û–¢–õ–ê–î–ö–ê: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
              setRealtimeText(prev => prev + ' ' + data.text);
              showNotification('success', '–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
              break;
              
            case 'ai_response':
              // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
              console.log('–û–¢–í–ï–¢ –û–¢ LLM:', data.text);
              console.log('–û–¢–õ–ê–î–ö–ê: LLM –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç, –Ω–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏');
              setRecordedText(data.text);
              showNotification('success', '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ì–∞–∑–∏–∫ –ò–ò');
              break;
              
            case 'speech_error':
              console.error('WebSocket: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', data.error);
              showNotification('warning', data.error || '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
              break;
              
            case 'tts_error':
              console.error('WebSocket: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', data.error);
              showNotification('error', data.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏');
              break;
              
            case 'error':
              console.error('WebSocket: –û–±—â–∞—è –æ—à–∏–±–∫–∞:', data.error);
              showNotification('error', data.error || '–û—à–∏–±–∫–∞ WebSocket');
              break;
              
            default:
              console.log('WebSocket: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
          }
        } else if (event.data instanceof Blob) {
          // –ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
          console.log('WebSocket: –ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º:', event.data.size, '–±–∞–π—Ç');
          playAudioResponse(event.data);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };
    
    ws.onerror = (error) => {
      setIsVoiceConnected(false);
      showNotification('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É');
      console.error('WebSocket error:', error);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      setTimeout(() => {
        if (!isVoiceConnected && shouldReconnect) {
          showNotification('info', '–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          connectVoiceWebSocket();
        }
      }, 5000);
    };
    
    ws.onclose = (event) => {
      setIsVoiceConnected(false);
      setVoiceSocket(null);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      if (event.code !== 1000 && shouldReconnect) { // 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        showNotification('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —á–∞—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å...');
        setTimeout(() => {
          if (!isVoiceConnected && shouldReconnect) {
            connectVoiceWebSocket();
          }
        }, 3000);
      } else {
        console.log('WebSocket –∑–∞–∫—Ä—ã—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      }
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanupVoiceResources = () => {
    console.log('üîß cleanupVoiceResources –≤—ã–∑–≤–∞–Ω–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
    if (silenceTimerRef.current) {
      clearTimeout(silenceTimerRef.current);
      silenceTimerRef.current = null;
      console.log('üîß –¢–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
      animationFrameRef.current = null;
      console.log('üîß –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current = null;
      console.log('üîß –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫
    if (currentStreamRef.current) {
      currentStreamRef.current.getTracks().forEach(track => track.stop());
      currentStreamRef.current = null;
      console.log('üîß –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
      audioContextRef.current.close();
      audioContextRef.current = null;
      console.log('üîß –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current.src = '';
      currentAudioRef.current = null;
      console.log('üîß –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (voiceSocket && voiceSocket.readyState === WebSocket.OPEN) {
      voiceSocket.close();
      setVoiceSocket(null);
      console.log('üîß WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setIsRecording(false);
    setIsProcessing(false);
    setIsSpeaking(false);
    setRecordingTime(0);
    setRealtimeText('');
    setAudioLevel(0);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setRecording(false);
    setSpeaking(false);
    
    console.log('üîß –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
    showNotification('info', '–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—à–∏–Ω—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const checkSilence = () => {
    if (audioLevel < silenceThreshold) {
      // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (!silenceTimerRef.current) {
        silenceTimerRef.current = setTimeout(() => {
          console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑-–∑–∞ —Ç–∏—à–∏–Ω—ã');
          stopRecording();
          showNotification('info', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å');
        }, silenceTimeout);
      }
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–≤—É–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (silenceTimerRef.current) {
        clearTimeout(silenceTimerRef.current);
        silenceTimerRef.current = null;
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞
  const playAudioResponse = async (audioBlob: Blob) => {
    try {
      console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º:', audioBlob.size, '–±–∞–π—Ç');
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      currentAudioRef.current = audio;
      
      audio.onended = () => {
        setIsSpeaking(false);
        setIsProcessing(false);
        URL.revokeObjectURL(audioUrl);
        currentAudioRef.current = null;
        console.log('–ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        showNotification('success', '–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É');
      };
      
      audio.onerror = () => {
        setIsSpeaking(false);
        setIsProcessing(false);
        showNotification('error', '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏');
        URL.revokeObjectURL(audioUrl);
        currentAudioRef.current = null;
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞');
      };
      
      setIsSpeaking(true);
      await audio.play();
      console.log('–ù–∞—á–∞—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
      setIsSpeaking(false);
      setIsProcessing(false);
      showNotification('error', '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ real-time —á–∞–Ω–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  const sendRealtimeChunk = async () => {
    if (audioChunksRef.current.length > 0 && voiceSocket && voiceSocket.readyState === WebSocket.OPEN) {
      try {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –¥–ª—è real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        const lastChunk = audioChunksRef.current[audioChunksRef.current.length - 1];
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é real-time —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º: ${lastChunk.size} –±–∞–π—Ç`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        voiceSocket.send(lastChunk);
        console.log('Real-time —á–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket');
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
      }
    }
  };

  const startRecording = async (): Promise<void> => {
    try {
      // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      setShouldReconnect(true);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (!isVoiceConnected || !voiceSocket || voiceSocket.readyState !== WebSocket.OPEN) {
        showNotification('info', '–ü–æ–¥–∫–ª—é—á–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç...');
        connectVoiceWebSocket();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É start_listening
      if (voiceSocket && voiceSocket.readyState === WebSocket.OPEN) {
        voiceSocket.send(JSON.stringify({ type: 'start_listening' }));
        showNotification('info', '–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...');
      }
    
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      if (currentStreamRef.current) {
        currentStreamRef.current.getTracks().forEach(track => track.stop());
      }
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      });
      currentStreamRef.current = stream;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      audioContextRef.current = new AudioContext();
      analyserRef.current = audioContextRef.current.createAnalyser();
      const source = audioContextRef.current.createMediaStreamSource(stream);
      source.connect(analyserRef.current);
      
      analyserRef.current.fftSize = 256;
      const bufferLength = analyserRef.current.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MediaRecorder - –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
      let selectedOptions = undefined;
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      const preferredMimeTypes = [
        'audio/wav',
        'audio/webm;codecs=pcm',
        'audio/webm;codecs=opus',
        'audio/webm',
        'audio/mp4',
        'audio/ogg;codecs=opus'
      ];
      
      for (const mimeType of preferredMimeTypes) {
        if (MediaRecorder.isTypeSupported(mimeType)) {
          selectedOptions = { mimeType };
          break;
        }
      }
      
      if (!selectedOptions) {
        mediaRecorderRef.current = new MediaRecorder(stream);
      } else {
        mediaRecorderRef.current = new MediaRecorder(stream, selectedOptions);
      }
      
      audioChunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          console.log(`–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º: ${event.data.size} –±–∞–π—Ç`);
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorderRef.current.onstop = async () => {
        console.log('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...');
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: ${audioChunksRef.current.length}`);
        console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤: ${audioChunksRef.current.reduce((sum, chunk) => sum + chunk.size, 0)} –±–∞–π—Ç`);
        
        setIsProcessing(true);
        
        try {
          // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
          console.log(`–°–æ–∑–¥–∞–Ω Blob —Ä–∞–∑–º–µ—Ä–æ–º: ${audioBlob.size} –±–∞–π—Ç, —Ç–∏–ø: ${audioBlob.type}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
          if (audioBlob.size < 100) {
            showNotification('warning', '–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
            setIsProcessing(false);
            return;
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏
          if (voiceSocket && voiceSocket.readyState === WebSocket.OPEN) {
            console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ WebSocket —Ä–∞–∑–º–µ—Ä–æ–º: ${audioBlob.size} –±–∞–π—Ç`);
            voiceSocket.send(audioBlob);
            showNotification('info', '–û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
          } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            console.log('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback...');
            showNotification('warning', 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback...');
            await processAudio(audioBlob);
            setIsProcessing(false);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:', error);
          showNotification('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ');
          setIsProcessing(false);
        }
      };

      mediaRecorderRef.current.onerror = (event) => {
        showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ');
        setIsRecording(false);
      };

      mediaRecorderRef.current.start(1000); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ
      console.log('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å, MediaRecorder –∑–∞–ø—É—â–µ–Ω');
      setIsRecording(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —É—Ä–æ–≤–Ω—è –∏ —Ç–∏—à–∏–Ω—ã
      updateAudioLevel();
      
      showNotification('info', '–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å. –ì–æ–≤–æ—Ä–∏—Ç–µ...');
       
     } catch (error) {
        const errorObj = error as any;
        if (errorObj?.name === 'NotAllowedError') {
          showNotification('error', '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
        } else if (errorObj?.name === 'NotFoundError') {
          showNotification('error', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } else {
          showNotification('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        }
        setIsRecording(false);
      }
  };

  const stopRecording = (): void => {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
    setShouldReconnect(false);
    
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current = null;
      console.log('üì± MediaRecorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫
    if (currentStreamRef.current) {
      currentStreamRef.current.getTracks().forEach(track => {
        track.stop();
        console.log('–ê—É–¥–∏–æ —Ç—Ä–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', track.kind, track.label);
      });
      currentStreamRef.current = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
      animationFrameRef.current = null;
      console.log('–ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
      audioContextRef.current.close();
      audioContextRef.current = null;
      console.log('–ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
    if (silenceTimerRef.current) {
      clearTimeout(silenceTimerRef.current);
      silenceTimerRef.current = null;
      console.log('–¢–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    setIsRecording(false);
    setAudioLevel(0);
    setRealtimeText('');
    setRecordingTime(0);
    
    console.log('–ó–∞–ø–∏—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    showNotification('info', '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // WebSocket –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateAudioLevel –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã
  const updateAudioLevel = () => {
    if (analyserRef.current && isRecording) {
      analyserRef.current.getByteFrequencyData(new Uint8Array(analyserRef.current.frequencyBinCount));
      const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);
      analyserRef.current.getByteFrequencyData(dataArray);
      
      const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
      const normalizedLevel = average / 255;
      
      setAudioLevel(normalizedLevel);
      lastAudioLevelRef.current = normalizedLevel;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—à–∏–Ω—É
      checkSilence();
      
      animationFrameRef.current = requestAnimationFrame(updateAudioLevel);
    }
  };

  const processAudio = async (audioBlob: Blob): Promise<void> => {
    if (!isConnected) {
      showNotification('error', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    console.log('Fallback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ HTTP API');
    setIsProcessing(true);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      const formData = new FormData();
      formData.append('audio_file', audioBlob, 'recording.wav');

      console.log('Fallback: –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
      const response = await fetch('http://localhost:8000/api/voice/recognize', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Fallback: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', response.status, errorText);
        showNotification('error', `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${response.status}`);
        return;
      }

      const result = await response.json();
      console.log('Fallback: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', result);
      
      if (result.success) {
        const recognizedText = result.text;
        console.log('–†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (Fallback):', recognizedText);
        console.log('–û–¢–õ–ê–î–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –º–µ—Ç–æ–¥, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLM');
        setRecordedText(recognizedText);
        
        if (recognizedText && recognizedText.trim()) {
          showNotification('success', '–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
          console.log('–û–¢–ü–†–ê–í–õ–Ø–Æ –í LLM (Fallback):', recognizedText);
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
          await sendVoiceMessage(recognizedText);
        } else {
          showNotification('warning', '–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      } else {
        showNotification('error', '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      }
    } catch (error) {
      console.error('Fallback: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
    } finally {
      setIsProcessing(false);
    }
  };

  const sendVoiceMessage = async (text: string) => {
    try {
      console.log('–û–¢–ü–†–ê–í–õ–Ø–Æ –í LLM:', text);
      console.log('–û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è LLM - —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
      const response = await fetch('http://localhost:8000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: text,
          streaming: false,
        }),
      });

      const result = await response.json();
      console.log('–û–¢–í–ï–¢ –û–¢ LLM:', result.response);
      console.log('–û–¢–õ–ê–î–ö–ê: LLM –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏');
      
      if (result.success) {
        console.log('–û—Ç–≤–µ—Ç LLM —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, —Å–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å');
        // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        await synthesizeSpeech(result.response);
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM:', result);
        showNotification('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ì–∞–∑–∏–∫ –ò–ò');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  };

  const synthesizeSpeech = async (text: string) => {
    if (!text.trim()) return;

    console.log('synthesizeSpeech –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:', text);
    console.log('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞:', voiceSettings);
    console.log('–ó–Ω–∞—á–µ–Ω–∏–µ speech_rate:', voiceSettings.speech_rate, '—Ç–∏–ø:', typeof voiceSettings.speech_rate);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current.src = '';
      currentAudioRef.current = null;
    }

    setIsSpeaking(true);
    
    try {
      const requestBody = {
        text: text,
        voice_id: voiceSettings.voice_id,
        voice_speaker: voiceSettings.voice_speaker,
        speech_rate: voiceSettings.speech_rate
      };
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏:', requestBody);
      console.log('–ü—Ä–æ–≤–µ—Ä—è—é speech_rate –≤ requestBody:', requestBody.speech_rate, '—Ç–∏–ø:', typeof requestBody.speech_rate);
      
      const response = await fetch('http://localhost:8000/api/voice/synthesize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (response.ok) {
        const audioBlob = await response.blob();
        console.log('–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º:', audioBlob.size, '–±–∞–π—Ç');
        
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        
        currentAudioRef.current = audio;
        
        audio.onended = () => {
          setIsSpeaking(false);
          URL.revokeObjectURL(audioUrl);
          currentAudioRef.current = null;
          console.log('–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ—á—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        };
        
        audio.onerror = () => {
          setIsSpeaking(false);
          showNotification('error', '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏');
          URL.revokeObjectURL(audioUrl);
          currentAudioRef.current = null;
          console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—á–∏');
        };
        
        await audio.play();
        console.log('–ù–∞—á–∞—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—á–∏');
      } else {
        const errorText = await response.text();
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', response.status, errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏');
      setIsSpeaking(false);
    }
  };

  const handleManualSend = () => {
    if (recordedText.trim()) {
      sendVoiceMessage(recordedText);
      setRecordedText('');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞ –≤ localStorage
  const saveVoiceSettings = (settings: typeof voiceSettings) => {
    console.log('–°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –≤ localStorage:', settings);
    localStorage.setItem('voice_speaker', settings.voice_speaker);
    localStorage.setItem('voice_id', settings.voice_id);
    localStorage.setItem('speech_rate', settings.speech_rate.toString());
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', settings);
    console.log('–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ speech_rate:', localStorage.getItem('speech_rate'));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const switchVoice = (direction: 'next' | 'prev') => {
    const voices = Object.keys(voiceTestMessages);
    let newIndex;
    
    if (direction === 'next') {
      newIndex = currentVoiceIndex === voices.length - 1 ? 0 : currentVoiceIndex + 1;
    } else {
      newIndex = currentVoiceIndex === 0 ? voices.length - 1 : currentVoiceIndex - 1;
    }
    
    const newVoice = voices[newIndex];
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current.src = '';
      currentAudioRef.current = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    setIsSpeaking(false);
    setCurrentTestVoice(null);
    
    setCurrentVoiceIndex(newIndex);
    const newSettings = { ...voiceSettings, voice_speaker: newVoice };
    setVoiceSettings(newSettings);
    saveVoiceSettings(newSettings); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞: newIndex =', newIndex, 'newVoice =', newVoice);
    testVoice(newVoice);
  };

  // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const testVoice = async (voiceName: string) => {
    try {
      console.log('testVoice –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å–∞:', voiceName);
      console.log('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞:', voiceSettings);
      console.log('–ó–Ω–∞—á–µ–Ω–∏–µ speech_rate:', voiceSettings.speech_rate, '—Ç–∏–ø:', typeof voiceSettings.speech_rate);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
        currentAudioRef.current.src = '';
        currentAudioRef.current = null;
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –Ω–æ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isSpeaking –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setCurrentTestVoice(voiceName);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testMessage = voiceTestMessages[voiceName as keyof typeof voiceTestMessages];
      
      const requestBody = {
        text: testMessage,
        voice_id: voiceSettings.voice_id,
        voice_speaker: voiceName,
        speech_rate: voiceSettings.speech_rate
      };
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏:', requestBody);
      console.log('–ü—Ä–æ–≤–µ—Ä—è—é speech_rate –≤ —Ç–µ—Å—Ç–æ–≤–æ–º requestBody:', requestBody.speech_rate, '—Ç–∏–ø:', typeof requestBody.speech_rate);
      
      const response = await fetch('http://localhost:8000/api/voice/synthesize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (response.ok) {
        const audioBlob = await response.blob();
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        
        console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ...');
        
        audio.onended = () => {
          console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          setCurrentTestVoice(null);
          // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setIsSpeaking(false) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          URL.revokeObjectURL(audioUrl);
        };
        
        audio.onerror = () => {
          console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞');
          setCurrentTestVoice(null);
          // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setIsSpeaking(false) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          showNotification('error', '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞');
          URL.revokeObjectURL(audioUrl);
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
        currentAudioRef.current = audio;
        
        try {
          await audio.play();
          console.log('–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
          // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setIsSpeaking(true) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          showNotification('success', `–¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å ${voiceName}...`);
        } catch (playError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', playError);
          showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞');
          setCurrentTestVoice(null);
        }
      } else {
        const errorText = await response.text();
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:', response.status, errorText);
        setCurrentTestVoice(null);
        // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setIsSpeaking(false) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
      setCurrentTestVoice(null);
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setIsSpeaking(false) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      showNotification('error', `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime(prev => prev + 1);
        
        // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –¥–ª—è real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if (recordingTime > 0 && recordingTime % 2 === 0 && audioChunksRef.current.length > 0) {
          sendRealtimeChunk();
        }
      }, 1000);
    } else {
      setRecordingTime(0);
      setRealtimeText(''); // –û—á–∏—â–∞–µ–º real-time —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    }
    
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRecording, recordingTime]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    setRecording(isRecording);
  }, [isRecording]);
  
  useEffect(() => {
    setSpeaking(isSpeaking);
  }, [isSpeaking]);

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å—ã, WebSocket –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
        mediaRecorderRef.current.stop();
        mediaRecorderRef.current = null;
      }
      if (currentStreamRef.current) {
        currentStreamRef.current.getTracks().forEach(track => track.stop());
        currentStreamRef.current = null;
      }
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        audioContextRef.current.close();
        audioContextRef.current = null;
      }
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
        currentAudioRef.current.src = '';
        currentAudioRef.current = null;
      }
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setRecording(false);
      setSpeaking(false);
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ª—é–±—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeunload –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    const handleBeforeUnload = () => {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å—ã, WebSocket –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
        mediaRecorderRef.current.stop();
        mediaRecorderRef.current = null;
      }
      if (currentStreamRef.current) {
        currentStreamRef.current.getTracks().forEach(track => track.stop());
        currentStreamRef.current = null;
      }
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        audioContextRef.current.close();
        audioContextRef.current = null;
      }
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
        currentAudioRef.current.src = '';
        currentAudioRef.current = null;
      }
      setRecording(false);
      setSpeaking(false);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    window.addEventListener('beforeunload', handleBeforeUnload);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å—ã, WebSocket –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
        mediaRecorderRef.current.stop();
        mediaRecorderRef.current = null;
      }
      if (currentStreamRef.current) {
        currentStreamRef.current.getTracks().forEach(track => track.stop());
        currentStreamRef.current = null;
      }
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        audioContextRef.current.close();
        audioContextRef.current = null;
      }
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
        currentAudioRef.current.src = '';
        currentAudioRef.current = null;
      }
      setRecording(false);
      setSpeaking(false);
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

  // ================================
  // –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
  // ================================

  const handleFileUpload = async (file: File): Promise<void> => {
    const allowedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/vnd.ms-excel',
      'text/plain',
    ];

    if (!allowedTypes.includes(file.type)) {
      showNotification('error', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF, Word (.docx), Excel (.xlsx) –∏ TXT');
      return;
    }

    if (file.size > 50 * 1024 * 1024) {
      showNotification('error', '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50MB');
      return;
    }

    setIsUploading(true);
    
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch(`${getApiUrl('/api/documents/upload')}`, {
        method: 'POST',
        body: formData,
      });
      
      if (response.ok) {
        const result: any = await response.json();
        showNotification('success', `–î–æ–∫—É–º–µ–Ω—Ç "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–º—É –≤ —á–∞—Ç–µ.`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
        setUploadedFiles(prev => [...prev, {
          name: file.name,
          size: file.size,
          type: file.type,
          uploadDate: new Date().toISOString(),
        }]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
        try {
          const docsResponse = await fetch(getApiUrl('/api/documents'));
          if (docsResponse.ok) {
            const docsResult: any = await docsResponse.json();
            if (docsResult.success && docsResult.documents) {
              const files = docsResult.documents.map((filename: string) => ({
                name: filename,
                size: 0,
                type: 'application/octet-stream',
                uploadDate: new Date().toISOString(),
              }));
              setUploadedFiles(files);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        }
        
        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        
      } else {
        const error = await response.json();
        showNotification('error', error.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
            } finally {
      setIsUploading(false);
    }
  };

  const handleFileDelete = async (fileName: string): Promise<void> => {
    try {
      const response = await fetch(`${getApiUrl(`/api/documents/${encodeURIComponent(fileName)}`)}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        const result: any = await response.json();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
        if (result.remaining_documents) {
          const files = result.remaining_documents.map((filename: string) => ({
            name: filename,
            size: 0,
            type: 'application/octet-stream',
            uploadDate: new Date().toISOString(),
          }));
          setUploadedFiles(files);
        } else {
          setUploadedFiles(prev => prev.filter(file => file.name !== fileName));
        }
        showNotification('success', `–î–æ–∫—É–º–µ–Ω—Ç "${fileName}" —É–¥–∞–ª–µ–Ω`);
        
        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        
      } else {
        const error = await response.json();
        showNotification('error', error.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
  };

  const handleDragOver = (e: React.DragEvent): void => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent): void => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent): void => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>): void => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>): void => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = (): void => {
    setAnchorEl(null);
  };

  const handleClearChat = (): void => {
    clearMessages();
    handleMenuClose();
  };

  const handleReconnect = (): void => {
    reconnect();
    handleMenuClose();
  };

  const handleStopGeneration = (): void => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ WebSocket
    stopGeneration();
    showNotification('info', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  };

  // ================================
  // –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–û–û–ë–©–ï–ù–ò–ô
  // ================================

    const MessageCard = ({ message }: { message: Message }): React.ReactElement => {
    const isUser = message.role === 'user';
    const [isHovered, setIsHovered] = useState(false);
    
    return (
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: isUser ? 'flex-end' : 'flex-start',
          mb: 1.5, /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CSS margin-bottom: 28px) */
          width: '100%',
        }}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <Card
          className="message-bubble"
          data-theme={isDarkMode ? 'dark' : 'light'}
          sx={{
            maxWidth: '75%',
            minWidth: '180px',
            backgroundColor: isUser 
              ? 'primary.main' 
              : isDarkMode ? 'background.paper' : '#f8f9fa',
            color: isUser ? 'primary.contrastText' : isDarkMode ? 'text.primary' : '#333',
            boxShadow: isDarkMode 
              ? '0 2px 8px rgba(0, 0, 0, 0.15)' 
              : '0 2px 8px rgba(0, 0, 0, 0.1)',
          }}
        >
          <CardContent sx={{ p: 1.2, pb: 0.8 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.3 }}>
              <Avatar
                sx={{
                  width: 24,
                  height: 24,
                  mr: 1,
                  bgcolor: isUser ? 'primary.dark' : 'secondary.main',
                }}
              >
                {isUser ? <PersonIcon /> : <BotIcon />}
              </Avatar>
                             <Typography variant="caption" sx={{ opacity: 0.8, fontSize: '0.75rem', fontWeight: 500 }}>
                 {isUser ? '–í—ã' : '–ì–∞–∑–∏–∫ –ò–ò'}
               </Typography>
              <Typography variant="caption" sx={{ ml: 'auto', opacity: 0.6, fontSize: '0.7rem' }}>
                {formatTimestamp(message.timestamp)}
              </Typography>
            </Box>
            
            <Box sx={{ mb: 0.3 }}>
              <MessageRenderer content={message.content} />
            </Box>
          </CardContent>
        </Card>
        
        {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∏–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏ - –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center',
          mt: 1,
          height: 20, /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ */
          opacity: isHovered ? 1 : 0, /* –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ */
          visibility: isHovered ? 'visible' : 'hidden', /* –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ */
        }}>
          <Tooltip title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
            <IconButton
              size="small"
              onClick={() => handleCopyMessage(message.content)}
              className="message-copy-button"
              data-theme={isDarkMode ? 'dark' : 'light'}
                             sx={{ 
                 opacity: 0.7,
                 p: 0.5,
                 /* –£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–π */
               }}
            >
              <CopyIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>
    );
  };

  // ================================
  // –î–ò–ê–õ–û–ì–ò
  // ================================

  const VoiceDialog = (): React.ReactElement => (
    <Dialog
      open={showVoiceDialog}
      onClose={() => setShowVoiceDialog(false)}
      maxWidth="md"
      fullWidth
      TransitionComponent={undefined}
      transitionDuration={0}
      PaperProps={{
        sx: {
          bgcolor: 'background.paper',
          borderRadius: 3,
        }
      }}
    >
      <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>
        –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
      </DialogTitle>
      <DialogContent sx={{ textAlign: 'center', py: 3 }}>
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket */}
        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 1 }}>
          <Box
            sx={{
              width: 12,
              height: 12,
              borderRadius: '50%',
              backgroundColor: isVoiceConnected ? 'success.main' : 'warning.main',
              animation: isVoiceConnected ? 'pulse 2s ease-in-out infinite' : 'none',
              border: isVoiceConnected ? '2px solid rgba(76, 175, 80, 0.3)' : '2px solid rgba(255, 152, 0, 0.3)',
            }}
          />
          <Typography variant="body2" color="text.secondary" sx={{ fontWeight: 500 }}>
            {isVoiceConnected ? 'Real-Time –ì–æ–ª–æ—Å–æ–≤–æ–π –ß–∞—Ç' : 'WebSocket –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏'}
          </Typography>
        </Box>

        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞ - –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É */}
        <Box sx={{ 
          position: 'absolute', 
          bottom: 20, 
          left: 20,
          zIndex: 10
        }}>
          <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞">
            <IconButton
              onClick={() => setShowVoiceSettings(!showVoiceSettings)}
              sx={{
                color: 'primary.main',
                bgcolor: 'background.default',
                border: '2px solid',
                borderColor: 'primary.main',
                width: 48,
                height: 48,
                '&:hover': {
                  bgcolor: 'primary.main',
                  color: 'white',
                  transform: 'scale(1.05)',
                },
                transition: 'all 0.3s ease',
                animation: showVoiceSettings ? 'spin 2s linear infinite' : 'none',
                '@keyframes spin': {
                  '0%': { transform: 'rotate(0deg)' },
                  '100%': { transform: 'rotate(360deg)' },
                },
              }}
            >
              <SettingsIcon />
            </IconButton>
          </Tooltip>
        </Box>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - —Å–ø—Ä–∞–≤–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <Box sx={{ 
          position: 'absolute', 
          bottom: 20, 
          right: 20,
          zIndex: 10
        }}>
          {(isRecording || isProcessing || isSpeaking || (voiceSocket && voiceSocket.readyState === WebSocket.OPEN)) && (
            <Tooltip title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã">
              <IconButton
                onClick={cleanupVoiceResources}
                sx={{
                  color: 'error.main',
                  bgcolor: 'background.default',
                  border: '2px solid',
                  borderColor: 'error.main',
                  width: 48,
                  height: 48,
                  '&:hover': {
                    bgcolor: 'error.main',
                    color: 'white',
                    transform: 'scale(1.05)',
                  },
                  transition: 'all 0.3s ease',
                }}
              >
                <StopIcon />
              </IconButton>
            </Tooltip>
          )}
        </Box>

        {/* –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ - —Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
        <Collapse in={showVoiceSettings}>
          <Card sx={{ mb: 3, p: 2, backgroundColor: 'background.default' }}>
            <Typography variant="subtitle2" color="primary" gutterBottom sx={{ textAlign: 'center', mb: 3 }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:
            </Typography>
            
            {/* –°–ª–∞–π–¥–µ—Ä —Å –∫—Ä—É–∂–∫–∞–º–∏ */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'center', 
              alignItems: 'center', 
              gap: 1,
              position: 'relative',
              height: 120,
              overflow: 'hidden'
            }}>
              {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –ª–µ–≤–æ–º—É –∫—Ä—É–≥—É */}
              <IconButton
                onClick={() => switchVoice('prev')}
                sx={{ 
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  zIndex: 2,
                  position: 'absolute',
                  left: 220,
                  top: '50%',
                  transform: 'translateY(-50%)'
                }}
              >
                <ChevronLeftIcon />
              </IconButton>

              {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—Ä—É–∂–∫–æ–≤ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ –Ω–∞–¥ —Å—á–µ—Ç—á–∏–∫–æ–º */}
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: 2,
                position: 'relative',
                width: 400,
                height: 100,
                mx: 'auto', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                ml: '168px' // –°–¥–≤–∏–≥–∞–µ–º –ª–µ–≤–µ–µ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Å—á–µ—Ç—á–∏–∫–æ–º
              }}>
                {Object.entries(voiceTestMessages).map(([voiceKey, testMessage], index) => {
                  const isSelected = voiceSettings.voice_speaker === voiceKey;
                  const isPlaying = isSpeaking && currentTestVoice === voiceKey;
                  
                                     // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä—É–∂–∫–∞
                   const distance = Math.abs(index - currentVoiceIndex);
                   let size, opacity, scale, zIndex, translateX;
                   
                   // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∫—Ä—É–∂–∫–æ–≤
                   console.log(`–ö—Ä—É–∂–æ–∫ ${voiceKey}: index = ${index}, currentVoiceIndex = ${currentVoiceIndex}, distance = ${distance}`);
                   
                   if (distance === 0) {
                     // –ê–∫—Ç–∏–≤–Ω—ã–π –∫—Ä—É–∂–æ–∫ - –±–æ–ª—å—à–æ–π –∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                     size = 80;
                     opacity = 1;
                     scale = 1;
                     zIndex = 3;
                     translateX = 0;
                     console.log(`${voiceKey} - –ê–ö–¢–ò–í–ù–´–ô: size = ${size}, opacity = ${opacity}, scale = ${scale}`);
                   } else if (distance === 1) {
                     // –°–æ—Å–µ–¥–Ω–∏–µ –∫—Ä—É–∂–∫–∏ - —Å—Ä–µ–¥–Ω–∏–µ –∏ –ø–æ –±–æ–∫–∞–º
                     size = 60;
                     opacity = 0.7;
                     scale = 0.8;
                     zIndex = 2;
                     translateX = index < currentVoiceIndex ? -62 : 81; // –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                     console.log(`${voiceKey} - –°–æ—Å–µ–¥–Ω–∏–π: size = ${size}, opacity = ${opacity}, scale = ${scale}`);
                   } else {
                     // –î–∞–ª—å–Ω–∏–µ –∫—Ä—É–∂–∫–∏ - –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ
                     size = 40;
                     opacity = 0.3;
                     scale = 0.6;
                     zIndex = 1;
                     translateX = index < currentVoiceIndex ? -95 : 134 // –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                     console.log(`${voiceKey} - –î–∞–ª—å–Ω–∏–π: size = ${size}, opacity = ${opacity}, scale = ${scale}`);
                   }
                  
                  return (
                    <Box
                      key={voiceKey}
                      sx={{
                        position: 'absolute',
                        left: '50%',
                        transform: `translateX(${translateX}px)`,
                        cursor: 'pointer',
                        transition: 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)',
                        zIndex,
                      }}
                      onClick={() => {
                        setCurrentVoiceIndex(index);
                        const newSettings = { ...voiceSettings, voice_speaker: voiceKey };
                        setVoiceSettings(newSettings);
                        saveVoiceSettings(newSettings); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                        console.log('–ö–ª–∏–∫ –ø–æ –∫—Ä—É–∂–∫—É: index =', index, 'voiceKey =', voiceKey);
                        testVoice(voiceKey);
                      }}
                    >
                      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è */}
                      <Box
                        sx={{
                          width: size,
                          height: size,
                          borderRadius: '50%',
                          background: isSelected 
                            ? 'linear-gradient(135deg, #ff6b9d 0%, #c44569 50%, #ff6b9d 100%)'
                            : 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%)',
                          backgroundSize: '200% 200%',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          boxShadow: isSelected 
                            ? '0 8px 25px rgba(255, 107, 157, 0.4)'
                            : '0 4px 15px rgba(102, 126, 234, 0.3)',
                          transition: 'all 0.3s ease',
                          opacity,
                          transform: `scale(${scale})`,
                          outline: 'none',
                          border: 'none',
                          animation: isSelected 
                            ? 'gradientShift 3s ease-in-out infinite, float 2s ease-in-out infinite'
                            : 'gradientShift 4s ease-in-out infinite',
                          '@keyframes gradientShift': {
                            '0%': { backgroundPosition: '0% 50%' },
                            '50%': { backgroundPosition: '100% 50%' },
                            '100%': { backgroundPosition: '0% 50%' },
                          },
                          '@keyframes float': {
                            '0%, 100%': { transform: `scale(${scale}) translateY(0px)` },
                            '50%': { transform: `scale(${scale}) translateY(-3px)` },
                          },
                          '&:hover': {
                            transform: `scale(${scale * 1.05})`,
                            boxShadow: isSelected 
                              ? '0 12px 35px rgba(255, 107, 157, 0.6)'
                              : '0 8px 25px rgba(102, 126, 234, 0.5)',
                            animation: 'gradientShift 1.5s ease-in-out infinite, float 1s ease-in-out infinite',
                            outline: 'none',
                            border: 'none',
                          },
                          '&:focus': {
                            outline: 'none',
                            border: 'none',
                          }
                        }}
                      >
                        {/* –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–µ—Å–∫ */}
                        <Box
                          sx={{
                            position: 'absolute',
                            top: '15%',
                            left: '15%',
                            width: '30%',
                            height: '30%',
                            borderRadius: '50%',
                            background: 'radial-gradient(circle, rgba(255,255,255,0.4) 0%, transparent 70%)',
                            animation: 'sparkle 2s ease-in-out infinite',
                            '@keyframes sparkle': {
                              '0%, 100%': { opacity: 0.4, transform: 'scale(1)' },
                              '50%': { opacity: 0.8, transform: 'scale(1.2)' },
                            }
                          }}
                        />
                      </Box>

                      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
                      {isPlaying && (
                        <Box
                          sx={{
                            position: 'absolute',
                            top: -5,
                            right: -5,
                            width: 20,
                            height: 20,
                            borderRadius: '50%',
                            backgroundColor: 'success.main',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            animation: 'pulse 1s infinite',
                            '@keyframes pulse': {
                              '0%': { transform: 'scale(1)', opacity: 1 },
                              '50%': { transform: 'scale(1.2)', opacity: 0.7 },
                              '100%': { transform: 'scale(1)', opacity: 1 },
                            }
                          }}
                        >
                          <VolumeUpIcon sx={{ fontSize: 12, color: 'white' }} />
                        </Box>
                      )}

                      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ */}
                      {isSelected && (
                        <Typography
                          variant="caption"
                          sx={{
                            textAlign: 'center',
                            mt: 1,
                            display: 'block',
                            fontWeight: 'bold',
                            color: 'primary.main',
                            opacity: 1,
                            fontSize: size * 0.2,
                            whiteSpace: 'nowrap'
                          }}
                        >
                          {voiceKey === 'baya' && 'Baya'}
                          {voiceKey === 'xenia' && 'Xenia'}
                          {voiceKey === 'kseniya' && 'Kseniya'}
                          {voiceKey === 'aidar' && 'Aidar'}
                          {voiceKey === 'eugene' && 'Eugene'}
                        </Typography>
                      )}                    
                    </Box>
                  );
                })}
              </Box>

              {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä—É–≥—É */}
              <IconButton
                onClick={() => switchVoice('next')}
                sx={{ 
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  zIndex: 2,
                  position: 'absolute',
                  right: 220,
                  top: '50%',
                  transform: 'translateY(-50%)'
                }}
              >
                <ChevronRightIcon />
              </IconButton>
            </Box>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞ */}
            <Box sx={{ textAlign: 'center', mt: 2 }}>
              <Typography variant="body2" color="text.secondary">
                {currentVoiceIndex + 1} / {Object.keys(voiceTestMessages).length}
              </Typography>
            </Box>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ */}
            <Box sx={{ mt: 3, px: 2 }}>
              <Typography variant="subtitle2" color="primary" gutterBottom sx={{ textAlign: 'center', mb: 2 }}>
                –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                <Typography variant="caption" color="text.secondary" sx={{ minWidth: 40 }}>
                  –ú–µ–¥–ª–µ–Ω–Ω–æ
                </Typography>
                <Slider
                  value={voiceSettings.speech_rate}
                  onChange={(_, value) => {
                    const newSettings = { ...voiceSettings, speech_rate: value as number };
                    console.log('–°–ª–∞–π–¥–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ –∏–∑–º–µ–Ω–µ–Ω:', {
                      —Å—Ç–∞—Ä–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ: voiceSettings.speech_rate,
                      –Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ: value,
                      —Ç–∏–ø_–∑–Ω–∞—á–µ–Ω–∏—è: typeof value
                    });
                    setVoiceSettings(newSettings);
                    saveVoiceSettings(newSettings);
                    console.log('–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', newSettings);
                  }}
                  min={0.5}
                  max={2.0}
                  step={0.1}
                  marks={[
                    { value: 0.5, label: '0.5x' },
                    { value: 1.0, label: '1.0x' },
                    { value: 1.5, label: '1.5x' },
                    { value: 2.0, label: '2.0x' }
                  ]}
                  valueLabelDisplay="auto"
                  sx={{
                    flex: 1,
                    '& .MuiSlider-mark': {
                      backgroundColor: 'primary.main',
                    },
                    '& .MuiSlider-markLabel': {
                      color: 'text.secondary',
                      fontSize: '0.75rem',
                    },
                    '& .MuiSlider-valueLabel': {
                      backgroundColor: 'primary.main',
                      color: 'white',
                    }
                  }}
                />
                <Typography variant="caption" color="text.secondary" sx={{ minWidth: 40 }}>
                  –ë—ã—Å—Ç—Ä–æ
                </Typography>
              </Box>
              <Typography variant="caption" color="text.secondary" sx={{ textAlign: 'center', display: 'block' }}>
                –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {voiceSettings.speech_rate.toFixed(1)}x
              </Typography>
              
              {/* –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ */}
              <Box sx={{ mt: 2, textAlign: 'center' }}>
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<VolumeUpIcon />}
                  onClick={() => {
                    const testMessage = "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.";
                    synthesizeSpeech(testMessage);
                  }}
                  disabled={isSpeaking}
                  sx={{
                    fontSize: '0.75rem',
                    px: 2,
                    py: 0.5,
                    borderColor: 'primary.main',
                    color: 'primary.main',
                    '&:hover': {
                      borderColor: 'primary.dark',
                      backgroundColor: 'primary.light',
                      color: 'primary.dark',
                    }
                  }}
                >
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
                </Button>
              </Box>
            </Box>
          </Card>
        </Collapse>

        {!isRecording ? (
          <Box>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            </Typography>
            <IconButton
              size="large"
              onClick={startRecording}
              disabled={state.isLoading && !state.messages.some(msg => msg.isStreaming)}
              sx={{
                width: 80,
                height: 80,
                bgcolor: 'primary.main',
                color: 'white',
                '&:hover': { bgcolor: 'primary.dark' },
                '&:disabled': {
                  bgcolor: 'action.disabledBackground',
                  color: 'action.disabled',
                },
              }}
            >
              <MicIcon sx={{ fontSize: 40 }} />
            </IconButton>
          </Box>
        ) : (
          <Box>
            {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ */}
            <Box sx={{ mb: 4, position: 'relative', display: 'inline-block' }}>
              <Box
                sx={{
                  width: 200,
                  height: 200,
                  borderRadius: '50%',
                  background: isRecording
                    ? `conic-gradient(#f44336 ${audioLevel * 360}deg, #e0e0e0 0deg)`
                    : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  animation: isRecording ? 'pulse 1.5s ease-in-out infinite' : 'none',
                  transition: 'all 0.3s ease',
                  '@keyframes pulse': {
                    '0%': { transform: 'scale(1)', opacity: 1 },
                    '50%': { transform: 'scale(1.2)', opacity: 0.7 },
                    '100%': { transform: 'scale(1)', opacity: 1 },
                  },
                }}
              >
                <IconButton
                  onClick={stopRecording}
                  disabled={isProcessing || isSpeaking}
                  sx={{
                    width: 120,
                    height: 120,
                    backgroundColor: 'white',
                    color: 'error.main',
                    '&:hover': {
                      backgroundColor: 'grey.100',
                    },
                  }}
                >
                  <StopIcon sx={{ fontSize: 48 }} />
                </IconButton>
              </Box>

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
              {isProcessing && (
                <Box sx={{ position: 'absolute', top: -10, right: -10 }}>
                  <CircularProgress size={24} color="secondary" />
                </Box>
              )}
              
              {isSpeaking && (
                <Box sx={{ position: 'absolute', bottom: -10, right: -10 }}>
                  <Box sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: 0.5,
                    height: 32
                  }}>
                    {[...Array(5)].map((_, index) => (
                      <Box
                        key={index}
                        sx={{
                          width: 4,
                          height: 16,
                          background: 'linear-gradient(180deg, #4caf50 0%, #66bb6a 50%, #81c784 100%)',
                          borderRadius: 2,
                          animation: 'soundWave 1s infinite ease-in-out',
                          animationDelay: `${index * 0.1}s`,
                          boxShadow: '0 2px 6px rgba(76, 175, 80, 0.4)',
                          '@keyframes soundWave': {
                            '0%, 100%': { 
                              transform: 'scaleY(0.2)',
                              opacity: 0.6
                            },
                            '50%': { 
                              transform: 'scaleY(1)',
                              opacity: 1
                            },
                          },
                        }}
                      />
                    ))}
                  </Box>
                </Box>
              )}
            </Box>

            {/* –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ */}
            <Box sx={{ mb: 2 }}>
              <Typography variant="h6" color="error.main" gutterBottom>
                –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ... {Math.floor(recordingTime / 60)}:{(recordingTime % 60).toString().padStart(2, '0')}
              </Typography>
              <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
                <Box sx={{ width: 8, height: 8, borderRadius: '50%', backgroundColor: 'error.main', animation: 'pulse 1s infinite' }} />
                <Box sx={{ width: 8, height: 8, borderRadius: '50%', backgroundColor: 'error.main', animation: 'pulse 1s infinite', animationDelay: '0.2s' }} />
                <Box sx={{ width: 8, height: 8, borderRadius: '50%', backgroundColor: 'error.main', animation: 'pulse 1s infinite', animationDelay: '0.4s' }} />
              </Box>
            </Box>

            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ. Real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã.
            </Typography>
          </Box>
        )}
        
        {/* Real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ */}
        {isRecording && realtimeText && (
          <Card sx={{ mb: 3, p: 2, backgroundColor: 'warning.light' }}>
            <Typography variant="subtitle2" color="warning.dark" gutterBottom>
              Real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫):
            </Typography>
            <Typography variant="body1" sx={{ fontStyle: 'italic', color: 'warning.dark' }}>
              "{realtimeText}"
            </Typography>
          </Card>
        )}

        {/* –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */}
        {recordedText && (
          <Card sx={{ mb: 3, p: 2, backgroundColor: 'background.default' }}>
            <Typography variant="subtitle2" color="primary" gutterBottom>
              –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
            </Typography>
            <Typography variant="body1" sx={{ fontStyle: 'italic' }}>
              "{recordedText}"
            </Typography>
            <Box sx={{ mt: 2, display: 'flex', gap: 1, justifyContent: 'center' }}>
              <Button
                variant="contained"
                startIcon={<SendIcon />}
                onClick={handleManualSend}
                disabled={isProcessing || isSpeaking}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Button>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={() => setRecordedText('')}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </Box>
          </Card>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isProcessing && (
          <Box sx={{ mb: 2, textAlign: 'center' }}>
            <Typography variant="body2" color="primary" sx={{ mb: 1 }}>
              –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç...
            </Typography>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 0.5 }}>
              <Box
                sx={{
                  width: 8,
                  height: 8,
                  borderRadius: '50%',
                  backgroundColor: 'primary.main',
                  animation: 'thinkingDot 1.4s ease-in-out infinite both',
                  '@keyframes thinkingDot': {
                    '0%, 80%, 100%': { transform: 'scale(0)' },
                    '40%': { transform: 'scale(1)' },
                  },
                }}
              />
              <Box
                sx={{
                  width: 8,
                  height: 8,
                  borderRadius: '50%',
                  backgroundColor: 'primary.main',
                  animation: 'thinkingDot 1.4s ease-in-out infinite both',
                  animationDelay: '0.2s',
                  '@keyframes thinkingDot': {
                    '0%, 80%, 100%': { transform: 'scale(0)' },
                    '40%': { transform: 'scale(1)' },
                  },
                }}
              />
              <Box
                sx={{
                  width: 8,
                  height: 8,
                  borderRadius: '50%',
                  backgroundColor: 'primary.main',
                  animation: 'thinkingDot 1.4s ease-in-out infinite both',
                  animationDelay: '0.4s',
                  '@keyframes thinkingDot': {
                    '0%, 80%, 100%': { transform: 'scale(0)' },
                    '40%': { transform: 'scale(1)' },
                  },
                }}
              />
            </Box>
          </Box>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ—á–∏ */}
        {isSpeaking && (
          <Box sx={{ mb: 2, textAlign: 'center' }}>
            <Typography variant="body2" color="success.main" sx={{ mb: 1 }}>
            </Typography>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
              {[...Array(9)].map((_, index) => (
                <Box
                  key={index}
                  sx={{
                    width: 4,
                    height: 22,
                    background: 'linear-gradient(180deg, #4caf50 0%, #66bb6a 50%, #81c784 100%)',
                    borderRadius: 2,
                    animation: 'soundWave2 1.2s infinite ease-in-out',
                    animationDelay: `${index * 0.08}s`,
                    boxShadow: '0 3px 8px rgba(76, 175, 80, 0.5)',
                    '@keyframes soundWave2': {
                      '0%, 100%': { 
                        transform: 'scaleY(0.3)',
                        opacity: 0.5
                      },
                      '50%': { 
                        transform: 'scaleY(1)',
                        opacity: 1
                      },
                    },
                  }}
                />
              ))}
            </Box>
          </Box>
        )}
      </DialogContent>
      <DialogActions sx={{ justifyContent: 'center', pb: 3 }}>
        <Button onClick={() => setShowVoiceDialog(false)}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );

  const DocumentDialog = (): React.ReactElement => (
    <Dialog
      open={showDocumentDialog}
      onClose={() => setShowDocumentDialog(false)}
      maxWidth="md"
      fullWidth
      TransitionComponent={undefined}
      transitionDuration={0}
    >
      <DialogTitle>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</DialogTitle>
      <DialogContent>
        <Box
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          sx={{
            border: '2px dashed',
            borderColor: isDragging ? 'primary.main' : 'divider',
            borderRadius: 2,
            p: 4,
            textAlign: 'center',
            bgcolor: isDragging ? 'action.hover' : 'background.paper',
            cursor: 'pointer',
          }}
          onClick={() => fileInputRef.current?.click()}
        >
          <UploadIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" sx={{ mb: 1 }}>
            –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, Word, Excel –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–æ 50MB
          </Typography>
          <input
            ref={fileInputRef}
            type="file"
            accept=".pdf,.docx,.xlsx,.txt"
            onChange={handleFileSelect}
            style={{ display: 'none' }}
          />
        </Box>
        

      </DialogContent>
      <DialogActions>
        <Button onClick={() => setShowDocumentDialog(false)}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );

  // ================================
  // –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–†
  // ================================

  return (
    <Box 
      className="fullscreen-chat" 
      sx={{ 
        pt: 8,
        background: isDarkMode 
          ? 'linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 50%, #1a1a1a 100%)'
          : 'linear-gradient(135deg, #f5f5f5 0%, #ffffff 50%, #fafafa 100%)',
        color: isDarkMode ? 'white' : '#333',
      }}
    >
      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <Box
        className="chat-messages-area"
                 sx={{
           border: isDragging ? '2px dashed' : 'none',
           borderColor: isDragging ? 'primary.main' : 'transparent',
           bgcolor: isDragging ? 'action.hover' : 'transparent',
           position: 'relative',
           minHeight: '60vh',
           display: 'flex',
           flexDirection: 'column',
           justifyContent: state.messages.length === 0 ? 'center' : 'flex-start',
           alignItems: 'center',
           py: 4,
         }}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
          {state.messages.length === 0 ? (
                         <Box
               sx={{
                 display: 'flex',
                 flexDirection: 'column',
                 alignItems: 'center',
                 justifyContent: 'center',
                 textAlign: 'center',
                 color: isDarkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)',
                 maxWidth: '600px',
                 mx: 'auto',
               }}
             >
               <BotIcon sx={{ fontSize: 64, mb: 2, opacity: 0.7, color: '#2196f3' }} />
                               <Typography variant="h6" sx={{ mb: 1, color: isDarkMode ? 'white' : '#333' }}>
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞–∑–∏–∫ –ò–ò!
                </Typography>
               <Typography variant="body1" sx={{ color: isDarkMode ? 'rgba(255, 255, 255, 0.9)' : 'rgba(0, 0, 0, 0.9)' }}>
                 –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
               </Typography>
               <Typography variant="body2" sx={{ mt: 2, opacity: 0.7, color: isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)' }}>
                 –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
               </Typography>
             </Box>
          ) : (
            <Box sx={{ 
              width: '100%', 
              maxWidth: '800px', 
              mx: 'auto',
              px: 2,
            }}>
              {state.messages.map((message, index) => (
                <MessageCard key={index} message={message} />
              ))}
            </Box>
          )}
          <div ref={messagesEndRef} />
          
          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */}
          {isDragging && (
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                bgcolor: 'rgba(33, 150, 243, 0.9)',
                backdropFilter: 'blur(10px)',
                color: 'white',
                p: 3,
                borderRadius: 2,
                zIndex: 1000,
                textAlign: 'center',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
                border: '1px solid rgba(255, 255, 255, 0.2)',
              }}
            >
              <UploadIcon sx={{ fontSize: 48, mb: 2 }} />
              <Typography variant="h6">
                –û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
              </Typography>
            </Box>
          )}
        </Box>

                 {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∞–ª–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
         {state.isLoading && !state.messages.some(msg => msg.isStreaming) && (
           <Box sx={{ 
             width: '100%', 
             maxWidth: '800px', 
             mx: 'auto',
             px: 2,
             mb: 3,
           }}>
             <Box
               sx={{
                 display: 'flex',
                 flexDirection: 'column',
                 alignItems: 'flex-start',
                 maxWidth: '75%',
                 minWidth: '180px',
               }}
             >
               <Card
                 sx={{
                   backgroundColor: isDarkMode ? 'background.paper' : '#f8f9fa',
                   color: isDarkMode ? 'text.primary' : '#333',
                   boxShadow: isDarkMode 
                     ? '0 2px 8px rgba(0, 0, 0, 0.15)' 
                     : '0 2px 8px rgba(0, 0, 0, 0.1)',
                   width: '100%',
                 }}
               >
                 <CardContent sx={{ p: 1.2, pb: 0.8 }}>
                   <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.3 }}>
                     <Avatar
                       sx={{
                         width: 24,
                         height: 24,
                         mr: 1,
                         bgcolor: 'secondary.main',
                         position: 'relative',
                         '&::before': {
                           content: '""',
                           position: 'absolute',
                           top: '-2px',
                           left: '-2px',
                           right: '-2px',
                           bottom: '-2px',
                           borderRadius: '50%',
                           background: 'radial-gradient(circle, rgba(33, 150, 243, 0.3) 0%, transparent 70%)',
                           animation: 'thinking-glow 2s ease-in-out infinite',
                           '@keyframes thinking-glow': {
                             '0%, 100%': { 
                               opacity: 0.3,
                               transform: 'scale(1)',
                             },
                             '50%': { 
                               opacity: 0.8,
                               transform: 'scale(1.3)',
                             },
                           },
                         },
                         animation: 'thinking 2s ease-in-out infinite',
                       }}
                     >
                       <BotIcon />
                     </Avatar>
                     <Typography variant="caption" sx={{ opacity: 0.8, fontSize: '0.75rem', fontWeight: 500 }}>
                       –ì–∞–∑–∏–∫ –ò–ò
                     </Typography>
                     <Typography variant="caption" sx={{ ml: 'auto', opacity: 0.6, fontSize: '0.7rem' }}>
                       {new Date().toLocaleTimeString('ru-RU', {
                         hour: '2-digit',
                         minute: '2-digit',
                       })}
                     </Typography>
                   </Box>
                   
                   <Box sx={{ 
                     display: 'flex', 
                     alignItems: 'center', 
                     gap: 1,
                     minHeight: '24px',
                   }}>
                     <Box sx={{ display: 'flex', gap: 0.5 }}>
                       <Box
                         sx={{
                           width: 6,
                           height: 6,
                           borderRadius: '50%',
                           bgcolor: '#2196f3',
                           animation: 'dot1 1.4s ease-in-out infinite both',
                           '@keyframes dot1': {
                             '0%, 80%, 100%': { transform: 'scale(0)' },
                             '40%': { transform: 'scale(1)' },
                           },
                         }}
                       />
                       <Box
                         sx={{
                           width: 6,
                           height: 6,
                           borderRadius: '50%',
                           bgcolor: '#2196f3',
                           animation: 'dot2 1.4s ease-in-out infinite both',
                           animationDelay: '0.2s',
                           '@keyframes dot2': {
                             '0%, 80%, 100%': { transform: 'scale(0)' },
                             '40%': { transform: 'scale(1)' },
                           },
                         }}
                       />
                       <Box
                         sx={{
                           width: 6,
                           height: 6,
                           borderRadius: '50%',
                           bgcolor: '#2196f3',
                           animation: 'dot3 1.4s ease-in-out infinite both',
                           animationDelay: '0.4s',
                           '@keyframes dot3': {
                             '0%, 80%, 100%': { transform: 'scale(0)' },
                             '40%': { transform: 'scale(1)' },
                           },
                         }}
                       />
                     </Box>
                     <Typography variant="body2" sx={{ 
                       color: isDarkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)',
                       fontSize: '0.875rem',
                     }}>
                       –¥—É–º–∞–µ—Ç...
                     </Typography>
                   </Box>
                 </CardContent>
               </Card>
             </Box>
           </Box>
         )}

                 {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
         <Box
           className="chat-input-area"
           data-theme={isDarkMode ? 'dark' : 'light'}
                       sx={{
              borderColor: isDragging ? 'primary.main' : 'divider',
              bgcolor: isDragging ? 'action.hover' : 'transparent',
            }}
           onDragOver={handleDragOver}
           onDragLeave={handleDragLeave}
           onDrop={handleDrop}
         >
          
                     {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
           <Box
             sx={{
               mt: 2,
               p: 2,
               borderRadius: 2,
               bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)',
               border: `1px solid ${isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,
               maxWidth: '800px', // –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
               width: '100%', // –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–æ maxWidth
               mx: 'auto', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
             }}
           >
                           {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
              <input
                ref={fileInputRef}
                type="file"
                accept=".pdf,.docx,.xlsx,.txt"
                onChange={handleFileSelect}
                style={{ display: 'none' }}
              />

              {/* –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –≤—ã—à–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */}
              {uploadedFiles.length > 0 && (
                <Box sx={{ mb: 2 }}>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    {uploadedFiles.map((file, index) => (
                      <Box
                        key={index}
                        className="file-attachment"
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 1,
                          p: 1,
                          borderRadius: 2,
                          maxWidth: '300px',
                          bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                          border: `1px solid ${isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`,
                        }}
                      >
                        <Box
                          sx={{
                            width: 32,
                            height: 32,
                            borderRadius: 1,
                            bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            color: isDarkMode ? 'white' : '#333',
                            flexShrink: 0,
                            border: `1px solid ${isDarkMode ? 'rgba(255, 255, 255, 0.3)' : 'rgba(0, 0, 0, 0.3)'}`,
                          }}
                        >
                          {file.type.includes('pdf') ? <PdfIcon fontSize="small" /> : 
                           file.type.includes('word') ? <DocumentIcon fontSize="small" /> : 
                           file.type.includes('excel') ? <DocumentIcon fontSize="small" /> : <DocumentIcon fontSize="small" />}
                        </Box>
                        <Box sx={{ minWidth: 0, flex: 1 }}>
                          <Typography 
                            variant="caption" 
                            sx={{ 
                              fontWeight: 'medium', 
                              display: 'block', 
                              color: isDarkMode ? 'white' : '#333',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              whiteSpace: 'nowrap'
                            }}
                            title={file.name}
                          >
                            {file.name}
                          </Typography>
                        </Box>
                        <IconButton
                          size="small"
                          onClick={() => handleFileDelete(file.name)}
                          sx={{ 
                            color: isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)',
                            '&:hover': { 
                              color: '#ff6b6b',
                              bgcolor: isDarkMode ? 'rgba(255, 107, 107, 0.2)' : 'rgba(255, 107, 107, 0.1)',
                            },
                            p: 0.5,
                            borderRadius: 1,
                            flexShrink: 0,
                          }}
                        >
                          <CloseIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    ))}
                  </Box>
                </Box>
              )}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
              {isUploading && (
                <Box sx={{ mb: 2, p: 1 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <CircularProgress size={16} sx={{ color: isDarkMode ? 'white' : '#333' }} />
                    <Typography variant="caption" sx={{ color: isDarkMode ? 'white' : '#333' }}>
                      –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...
                    </Typography>
                  </Box>
                </Box>
              )}

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */}
              <TextField
                ref={inputRef}
                fullWidth
                multiline
                maxRows={4}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={
                  !isConnected 
                    ? "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –Ω–∞ –ø–æ—Ä—Ç—É 8000" 
                    : state.isLoading && !state.messages.some(msg => msg.isStreaming)
                      ? "–ì–∞–∑–∏–∫–ò–ò –¥—É–º–∞–µ—Ç..." 
                      : state.isLoading && state.messages.some(msg => msg.isStreaming)
                        ? "–ì–∞–∑–∏–∫–ò–ò –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç... –ù–∞–∂–º–∏—Ç–µ ‚èπÔ∏è —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                        : "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
                }
                variant="outlined"
                size="small"
                disabled={!isConnected || (state.isLoading && !state.messages.some(msg => msg.isStreaming))}
                sx={{
                  mb: 2,
                  '& .MuiOutlinedInput-root': {
                    bgcolor: 'transparent',
                    border: 'none',
                    '&:hover': {
                      bgcolor: 'transparent',
                    },
                    '&.Mui-focused': {
                      bgcolor: 'transparent',
                    }
                  }
                }}
              />

                           {/* –ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É */}
              <Box
                sx={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: 1,
                  justifyContent: 'space-between',
                }}
              >
                                 {/* –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ */}
                 <Box sx={{ display: 'flex', gap: 1 }}>
                   {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
                   <Tooltip title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç">
                     <IconButton
                       onClick={() => fileInputRef.current?.click()}
                       sx={{ 
                         color: '#2196f3',
                         bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                         '&:hover': {
                           bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
                         },
                         '&:active': {
                           transform: 'none',
                         }
                       }}
                       disableRipple
                       disabled={isUploading || (state.isLoading && !state.messages.some(msg => msg.isStreaming))}
                     >
                       {isUploading ? <CircularProgress size={20} /> : <AttachFileIcon sx={{ color: '#2196f3' }} />}
                     </IconButton>
                   </Tooltip>

                                       {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–æ–π */}
                    <Tooltip title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è">
                      <IconButton
                        onClick={handleMenuOpen}
                        disabled={state.isLoading && !state.messages.some(msg => msg.isStreaming)}
                        sx={{ 
                          color: isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)',
                          bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                          '&:hover': {
                            bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
                          },
                          '&:disabled': {
                            color: isDarkMode ? 'rgba(255, 255, 255, 0.3)' : 'rgba(0, 0, 0, 0.3)',
                            bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)',
                          }
                        }}
                      >
                        <SettingsIcon />
                      </IconButton>
                    </Tooltip>
                 </Box>

                                 {/* –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ */}
                 <Box sx={{ display: 'flex', gap: 1 }}>
                   {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
                   {state.messages.some(msg => msg.isStreaming) ? (
                     <Tooltip title="–ü—Ä–µ—Ä–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é">
                       <IconButton
                         onClick={handleStopGeneration}
                         color="error"
                         sx={{
                           bgcolor: 'error.main',
                           color: 'white',
                           '&:hover': {
                             bgcolor: 'error.dark',
                           },
                           animation: 'pulse 2s ease-in-out infinite',
                           '@keyframes pulse': {
                             '0%': { opacity: 1 },
                             '50%': { opacity: 0.7 },
                             '100%': { opacity: 1 },
                           },
                         }}
                       >
                         <SquareIcon />
                       </IconButton>
                     </Tooltip>
                   ) : (
                     <Tooltip title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
                       <IconButton
                         onClick={handleSendMessage}
                         disabled={!inputMessage.trim() || !isConnected || (state.isLoading && !state.messages.some(msg => msg.isStreaming))}
                         color="primary"
                         sx={{
                           bgcolor: 'primary.main',
                           color: 'white',
                           '&:hover': {
                             bgcolor: 'primary.dark',
                           },
                           '&:disabled': {
                             bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.12)',
                             color: isDarkMode ? 'rgba(255, 255, 255, 0.6)' : 'rgba(0, 0, 0, 0.26)',
                               border: isDarkMode ? '1px solid rgba(255, 255, 255, 0.2)' : 'none',
                           }
                         }}
                       >
                         <SendIcon />
                       </IconButton>
                     </Tooltip>
                   )}

                  {/* –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ */}
                  <Tooltip title="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥">
                    <IconButton
                      onClick={() => setShowVoiceDialog(true)}
                      disabled={state.isLoading && !state.messages.some(msg => msg.isStreaming)}
                      sx={{
                        bgcolor: 'secondary.main',
                        color: 'white',
                        '&:hover': { 
                          bgcolor: 'secondary.dark' 
                        },
                        '&:disabled': {
                          bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.12)',
                          color: isDarkMode ? 'rgba(255, 255, 255, 0.6)' : 'rgba(0, 0, 0, 0.26)',
                        }
                      }}
                    >
                      <MicIcon />
                    </IconButton>
                  </Tooltip>
                </Box>
              </Box>
           </Box>
        </Box>

             {/* –î–∏–∞–ª–æ–≥–∏ */}
       <VoiceDialog />
       <DocumentDialog />

               {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞) */}
       <Menu
         anchorEl={anchorEl}
         open={Boolean(anchorEl)}
         onClose={handleMenuClose}
         anchorOrigin={{
           vertical: 'top',
           horizontal: 'left',
         }}
         transformOrigin={{
           vertical: 'bottom',
           horizontal: 'left',
         }}
         PaperProps={{
           sx: {
             bgcolor: isDarkMode ? 'background.paper' : 'white',
             border: `1px solid ${isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,
             boxShadow: isDarkMode 
               ? '0 4px 20px rgba(0, 0, 0, 0.3)' 
               : '0 4px 20px rgba(0, 0, 0, 0.15)',
           }
         }}
       >
         <MenuItem onClick={handleClearChat} sx={{ gap: 1 }}>
           <ClearIcon fontSize="small" />
           –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
         </MenuItem>
         <MenuItem onClick={handleReconnect} sx={{ gap: 1 }}>
           <RefreshIcon fontSize="small" />
           –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
         </MenuItem>
       </Menu>

       {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
       <Snackbar
         open={showCopyAlert}
         autoHideDuration={2000}
         onClose={() => setShowCopyAlert(false)}
       >
         <Alert severity="success" onClose={() => setShowCopyAlert(false)}>
           –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
         </Alert>
       </Snackbar>
     </Box>
   );
 }
