import React, { createContext, useContext, useEffect, useRef, useState, ReactNode } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAppActions } from './AppContext';
import { API_CONFIG } from '../config/api';

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
  sendMessage: (message: string, streaming?: boolean) => void;
  stopGeneration: () => void;
  reconnect: () => void;
}

const SocketContext = createContext<SocketContextType | null>(null);

export function SocketProvider({ children }: { children: ReactNode }) {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);

  const { addMessage, updateMessage, setLoading, showNotification } = useAppActions();
  const currentMessageRef = useRef<string | null>(null);

  const connectSocket = () => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO...');
    
    const newSocket = io(API_CONFIG.BASE_URL, {
      transports: ['websocket', 'polling'], // –î–æ–±–∞–≤–ª—è–µ–º fallback –Ω–∞ polling
      autoConnect: false,
      timeout: 20000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
      forceNew: true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    newSocket.on('connect', () => {
      console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      setIsConnected(true);
      showNotification('success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    newSocket.on('disconnect', (reason) => {
      console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      setIsConnected(false);
      showNotification('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
    });

    // –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect_error', (error: any) => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO:', error);
      console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.type || 'unknown');
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message || 'No message');
      console.error('–û–ø–∏—Å–∞–Ω–∏–µ:', error.description || 'No description');
      setIsConnected(false);
      showNotification('error', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    newSocket.on('disconnect', (reason, details) => {
      console.log('üîå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω:', reason, details);
      setIsConnected(false);
      showNotification('warning', `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${reason}`);
    });

    newSocket.on('reconnect', (attemptNumber) => {
      console.log('Socket.IO –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
      setIsConnected(true);
      showNotification('success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    newSocket.on('reconnect_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Socket.IO
    newSocket.on('chat_chunk', (data) => {
      console.log('–ü–æ–ª—É—á–µ–Ω chunk:', data);
      handleServerMessage({ type: 'chunk', ...data });
    });

    newSocket.on('chat_complete', (data) => {
      console.log('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', data);
      handleServerMessage({ type: 'complete', ...data });
    });

    newSocket.on('chat_error', (data) => {
      console.log('–û—à–∏–±–∫–∞ —á–∞—Ç–∞:', data);
      handleServerMessage({ type: 'error', ...data });
    });

    newSocket.on('generation_stopped', (data) => {
      console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data);
      handleServerMessage({ type: 'stopped', ...data });
    });

    setSocket(newSocket);
    newSocket.connect();
  };

  const handleServerMessage = (data: any) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data);

    switch (data.type) {
      case 'chunk':
        console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è chunk, current ID:', currentMessageRef.current);
        // –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (currentMessageRef.current) {
          console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', currentMessageRef.current);
          updateMessage(currentMessageRef.current, data.accumulated || data.chunk, true);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
          console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞');
          const messageId = addMessage({
            role: 'assistant',
            content: data.accumulated || data.chunk,
            timestamp: new Date().toISOString(),
            isStreaming: true,
          });
          currentMessageRef.current = messageId;
          console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:', messageId);
        }
        break;

      case 'complete':
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, current ID:', currentMessageRef.current);
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (currentMessageRef.current) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
          console.log('–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', currentMessageRef.current);
          updateMessage(currentMessageRef.current, data.response, false);
          currentMessageRef.current = null;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
          console.log('–°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
          const finalMessageId = addMessage({
            role: 'assistant',
            content: data.response,
            timestamp: data.timestamp || new Date().toISOString(),
            isStreaming: false,
          });
          console.log('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:', finalMessageId);
        }
        setLoading(false);

        break;

      case 'error':
        console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.error);
        showNotification('error', `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.error}`);
        setLoading(false);
        currentMessageRef.current = null;

        break;
        
      case 'stopped':
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º');

        setLoading(false);
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (currentMessageRef.current) {
          updateMessage(currentMessageRef.current, undefined, false);
          currentMessageRef.current = null;
        }
        break;

      default:
        console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
    }
  };

  const sendMessage = (message: string, streaming: boolean = true) => {
    if (!socket || !isConnected) {
      showNotification('error', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.substring(0, 50) + '...');
    

    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessageId = addMessage({
      role: 'user',
      content: message,
      timestamp: new Date().toISOString(),
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ, ID:', userMessageId);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(true);
    currentMessageRef.current = null;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO
    const messageData = {
      message,
      streaming,
      timestamp: new Date().toISOString(),
    };

    socket.emit('chat_message', messageData);
  };

  const stopGeneration = () => {
    if (!socket || !isConnected) {
      showNotification('error', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Socket.IO
    socket.emit('stop_generation', {
      timestamp: new Date().toISOString(),
    });
    
    // –°—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    setLoading(false);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (currentMessageRef.current) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      updateMessage(currentMessageRef.current, undefined, false);
      currentMessageRef.current = null;
    }
    
    showNotification('info', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  };

  const reconnect = () => {
    if (socket) {
      socket.disconnect();
    }
    setTimeout(connectSocket, 1000);
  };

  useEffect(() => {
    connectSocket();

    return () => {
      if (socket) {
        console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        socket.disconnect();
      }
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const contextValue: SocketContextType = {
    socket,
    isConnected,
    sendMessage,
    stopGeneration,
    reconnect,
  };

  return (
    <SocketContext.Provider value={contextValue}>
      {children}
    </SocketContext.Provider>
  );
}

export function useSocket() {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
}
